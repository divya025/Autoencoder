{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stacked Sparse Denoising Autoencoder\n",
    "\n",
    "In this assignment, we will create a Stacked Sparse Denoising Autoencoder (SSDA) with the purpose of denoising grayscale images.\n",
    "\n",
    "Not everything required to finish this assignment is covered in class but you should start working on \"Imports\", \"Load Images\", and \"Create Patches\" subsections that follow.\n",
    "\n",
    "For this assignment, we recommend working in a [Jupyter Notebook](http://jupyter.org). Jupyter Notebook is a browser based interactive programming environment and supports [several languages](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels).\n",
    "\n",
    "For this assignment, you will most likely need to use a deep learning framework. Several frameworks exist. [Here are a few of them](https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software). Based on personal and borrowed experience, I will recommend working with Keras if you have no idea what to choose. Brave or experienced users can feel free to use other frameworks.\n",
    "\n",
    "I (Priyank) will cover an overview of python, numpy, jupyter, and a deep learning framework sometime during next week.\n",
    "\n",
    "Keras will not work on NEU cluster, though, and you will have to train on your machine or Maria's desktop. If you don't have an access to yet, now is the best time to request it.\n",
    "\n",
    "Additionally, we will also need to allocate time slots to each of the students to train their models on desktop should someone chooses to implement a complex model.\n",
    "\n",
    "This homework is worth 100 points. However, there is no breakdown of points per steps. These steps are minimum that is required to score 100 points. Bonus points for showing interesting results and insights.\n",
    "\n",
    "*Credits for this assignment go to Maria's summer advisee Kaleigh O'hara.*\n",
    "\n",
    "This SSDA model is made up of two autoencoders.  Rather than train the entire model at once, we train the two autoencoder layers individually, save their weights, and then use those weights to initialize the stacked autoencoder model.  \n",
    "\n",
    "A single autoencoder model includes an input layer, an encoding layer and a decoding layer.  After training the first autoencoder and saving its weights, we run the original clean and noisy patches through the input and encoding layers of our training model.  The output patches of this model become the input patches to the second autoencoderâ€™s training model.  \n",
    "\n",
    "We train the fully assembled SSDA model by initializing the two encoding layers to the weights saved from our individually trained autoencoder models.  We provide the trained SSDA model with noisy test images and evaluate its performance.\n",
    "\n",
    "  \n",
    "Keras Blog - 'Deep autoencoder' used as example  \n",
    "https://blog.keras.io/building-autoencoders-in-keras.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IMPORTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "#to resolve mkl bug when importing skimage (Seattle Computer Only)\n",
    "# import mkl\n",
    "# mkl.get_max_threads()\n",
    "\n",
    "from keras.layers import Input, Dense\n",
    "from keras.models import Model\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "from keras.datasets import mnist\n",
    "import numpy as np\n",
    "import cv2 as cv2\n",
    "\n",
    "\n",
    "import os as os  #some debugging code\n",
    "# os.sys.path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LOAD IMAGES  \n",
    "For this assignment, we will use images from the Berkeley Segmentation Data Set and Benchmarks 500 (BSDS500).  The BSDS500 dataset provides three categories of images: train, val, and test, which we will use for training, validating, and testing the models.  \n",
    "https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/resources.html  \n",
    "  \n",
    " \n",
    "To reduce the dimensionality of the data, your program should convert the images to greyscale.   \n",
    "** Load the BSDS500 train, validate, and test datasets: **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_path = \"/Users/divyaagarwal/Desktop/Computervision/Assignment2Autoencoders/BSDS500/data/images/train/\"\n",
    "train_imgs = [f for f in os.listdir(train_path) if f[-3:] == 'jpg']\n",
    "train_list = [cv2.imread(os.path.join(train_path, f), cv2.IMREAD_GRAYSCALE) for f in train_imgs]\n",
    "train = np.array([t for t in train_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(321, 481)\n",
      "[[ 111.  115.  116. ...,   30.   28.   29.]\n",
      " [ 108.  109.  110. ...,   29.   31.   29.]\n",
      " [ 118.  116.  117. ...,   27.   30.   30.]\n",
      " ..., \n",
      " [  59.   58.   62. ...,   42.   43.   37.]\n",
      " [  63.   65.   68. ...,   44.   39.   36.]\n",
      " [  69.   70.   63. ...,   42.   38.   34.]]\n",
      "[[ 50.  50.  49. ...,  48.  49.  49.]\n",
      " [ 50.  50.  50. ...,  49.  50.  49.]\n",
      " [ 49.  50.  50. ...,  50.  50.  50.]\n",
      " ..., \n",
      " [ 31.  32.  35. ...,  34.  34.  30.]\n",
      " [ 33.  29.  33. ...,  31.  30.  31.]\n",
      " [ 30.  30.  30. ...,  30.  31.  31.]]\n",
      "[[ 146.  187.  181. ...,  202.  195.  186.]\n",
      " [ 184.  187.  163. ...,  190.  188.  172.]\n",
      " [ 164.  151.  136. ...,  179.  178.  166.]\n",
      " ..., \n",
      " [  54.   41.   34. ...,   58.   44.   28.]\n",
      " [  55.   19.   48. ...,   38.   52.   27.]\n",
      " [  73.   54.   45. ...,   30.   74.   48.]]\n",
      "[[ 66.  65.  66. ...,  27.  28.  28.]\n",
      " [ 68.  67.  67. ...,  27.  27.  28.]\n",
      " [ 71.  69.  69. ...,  27.  26.  28.]\n",
      " ..., \n",
      " [ 82.  73.  65. ...,  30.  27.  27.]\n",
      " [ 68.  65.  60. ...,  28.  29.  28.]\n",
      " [ 54.  57.  55. ...,  28.  29.  28.]]\n",
      "[[  62.   57.   63. ...,  108.  104.   97.]\n",
      " [  61.   59.   65. ...,  106.  101.   93.]\n",
      " [  66.   70.   76. ...,  106.  104.   97.]\n",
      " ..., \n",
      " [  32.   31.   31. ...,   36.   28.   29.]\n",
      " [  29.   30.   31. ...,   25.   31.   30.]\n",
      " [  29.   29.   29. ...,   30.   30.   29.]]\n",
      "[[ 116.  113.  113. ...,  112.  111.  112.]\n",
      " [ 113.  113.  114. ...,  111.  111.  110.]\n",
      " [ 113.  115.  117. ...,  112.  111.  112.]\n",
      " ..., \n",
      " [ 105.  109.  111. ...,  100.  100.  107.]\n",
      " [ 108.  112.  113. ...,  100.   99.  101.]\n",
      " [ 113.  112.  111. ...,   97.   97.  100.]]\n",
      "[[ 43.  73.  87. ...,  83.  85.  86.]\n",
      " [ 64.  84.  93. ...,  84.  86.  89.]\n",
      " [ 86.  89.  89. ...,  84.  87.  86.]\n",
      " ..., \n",
      " [ 63.  64.  65. ...,  79.  80.  78.]\n",
      " [ 61.  61.  61. ...,  79.  81.  79.]\n",
      " [ 52.  57.  58. ...,  75.  77.  76.]]\n",
      "[[  81.   78.   76. ...,   32.   27.   28.]\n",
      " [  83.   81.   78. ...,   26.   31.   29.]\n",
      " [  83.   81.   79. ...,   29.   29.   29.]\n",
      " ..., \n",
      " [ 108.  111.  110. ...,   42.   44.   38.]\n",
      " [ 116.  116.  119. ...,   47.   39.   36.]\n",
      " [ 116.  114.  126. ...,   45.   42.   37.]]\n",
      "[[ 95.  94.  94. ...,  94.  94.  96.]\n",
      " [ 94.  94.  94. ...,  95.  95.  94.]\n",
      " [ 93.  93.  94. ...,  95.  95.  94.]\n",
      " ..., \n",
      " [ 28.  26.  26. ...,  25.  29.  30.]\n",
      " [ 28.  30.  30. ...,  28.  29.  29.]\n",
      " [ 29.  29.  29. ...,  29.  28.  29.]]\n",
      "[[ 59.  68.  76. ...,  51.  46.  43.]\n",
      " [ 58.  65.  70. ...,  53.  48.  46.]\n",
      " [ 59.  63.  63. ...,  57.  53.  46.]\n",
      " ..., \n",
      " [ 62.  57.  54. ...,  33.  34.  33.]\n",
      " [ 61.  55.  52. ...,  33.  34.  33.]\n",
      " [ 58.  53.  49. ...,  34.  33.  33.]]\n",
      "[[ 58.  35.  33. ...,  86.  91.  88.]\n",
      " [ 57.  31.  31. ...,  78.  75.  78.]\n",
      " [ 56.  28.  28. ...,  76.  61.  69.]\n",
      " ..., \n",
      " [ 66.  65.  67. ...,  81.  71.  77.]\n",
      " [ 87.  89.  89. ...,  80.  66.  64.]\n",
      " [ 80.  90.  89. ...,  84.  83.  79.]]\n",
      "[[  47.   65.   88. ...,   97.   94.  110.]\n",
      " [  48.   77.   94. ...,  107.  112.  113.]\n",
      " [  88.   97.  118. ...,   93.  101.   97.]\n",
      " ..., \n",
      " [ 136.  137.  120. ...,  123.  116.  125.]\n",
      " [ 138.  138.  150. ...,  143.  145.  146.]\n",
      " [ 142.  134.  145. ...,  161.  156.  160.]]\n",
      "[[  58.   98.   80. ...,  196.  199.  198.]\n",
      " [  73.  108.  104. ...,  198.  200.  198.]\n",
      " [  88.  111.   81. ...,  199.  199.  199.]\n",
      " ..., \n",
      " [ 124.  145.  133. ...,   90.   84.   85.]\n",
      " [ 108.  113.  117. ...,   92.   88.   98.]\n",
      " [  96.  102.  112. ...,  107.   97.  107.]]\n",
      "[[ 41.  40.  38. ...,  40.  35.  27.]\n",
      " [ 42.  40.  38. ...,  46.  44.  40.]\n",
      " [ 43.  41.  38. ...,  45.  45.  46.]\n",
      " ..., \n",
      " [ 53.  54.  55. ...,  52.  47.  50.]\n",
      " [ 48.  52.  53. ...,  52.  50.  48.]\n",
      " [ 50.  49.  51. ...,  48.  48.  43.]]\n",
      "[[  45.   61.  118. ...,  127.  123.  121.]\n",
      " [  50.   83.  126. ...,  127.  124.  126.]\n",
      " [  60.  111.  134. ...,  126.  125.  125.]\n",
      " ..., \n",
      " [  97.  117.  172. ...,   85.  153.  177.]\n",
      " [  99.  109.   93. ...,  121.  147.  187.]\n",
      " [ 210.  237.  200. ...,   97.  116.  138.]]\n",
      "[[  59.   58.  140. ...,  173.  172.  169.]\n",
      " [  56.   97.  188. ...,  179.  176.  171.]\n",
      " [  63.  147.  193. ...,  173.  171.  167.]\n",
      " ..., \n",
      " [ 177.  214.  150. ...,  190.  183.  157.]\n",
      " [ 124.  154.  194. ...,  218.  193.  143.]\n",
      " [  85.  120.  107. ...,  238.  213.  144.]]\n",
      "[[ 179.  176.  179. ...,  250.  250.  251.]\n",
      " [ 179.  175.  177. ...,  251.  251.  251.]\n",
      " [ 178.  174.  176. ...,  251.  252.  251.]\n",
      " ..., \n",
      " [  19.   12.   12. ...,   16.   17.   30.]\n",
      " [  13.   10.    9. ...,   23.   15.   11.]\n",
      " [  10.   10.   18. ...,   24.   22.   20.]]\n",
      "[[  84.   85.   85. ...,   86.   81.   82.]\n",
      " [  84.   85.   85. ...,   85.   82.   81.]\n",
      " [  84.   84.   84. ...,   82.   82.   82.]\n",
      " ..., \n",
      " [  40.   44.   32. ...,  101.  119.  112.]\n",
      " [  32.   35.   28. ...,   92.  101.  115.]\n",
      " [  55.   53.   52. ...,   99.  105.  118.]]\n",
      "[[  31.   30.   29. ...,   34.   24.   13.]\n",
      " [  52.   52.   51. ...,   76.   54.   15.]\n",
      " [  84.   84.   84. ...,   84.   61.   13.]\n",
      " ..., \n",
      " [ 245.  247.  246. ...,  116.  106.   31.]\n",
      " [ 245.  247.  245. ...,  114.  109.   34.]\n",
      " [ 247.  246.  247. ...,  114.  112.   35.]]\n",
      "[[  66.   63.   71. ...,  121.  124.  112.]\n",
      " [ 106.   94.   81. ...,  118.  123.  115.]\n",
      " [ 133.  185.  174. ...,  116.  118.  115.]\n",
      " ..., \n",
      " [  20.   20.   19. ...,   25.   24.   25.]\n",
      " [  19.   20.   21. ...,   23.   20.   24.]\n",
      " [  20.   20.   21. ...,   16.   12.   13.]]\n",
      "[[ 28.  28.  29. ...,  30.  30.  36.]\n",
      " [ 26.  27.  29. ...,  28.  28.  33.]\n",
      " [ 27.  30.  33. ...,  28.  29.  30.]\n",
      " ..., \n",
      " [ 34.  31.  27. ...,  45.  44.  32.]\n",
      " [ 31.  32.  29. ...,  42.  39.  34.]\n",
      " [ 36.  34.  31. ...,  16.  15.  16.]]\n",
      "[[ 15.  17.  18. ...,  15.  15.  15.]\n",
      " [ 14.  15.  20. ...,  15.  15.  15.]\n",
      " [ 17.  14.  18. ...,  15.  15.  15.]\n",
      " ..., \n",
      " [ 13.  16.  13. ...,  43.  49.  50.]\n",
      " [ 16.  15.  14. ...,  44.  44.  46.]\n",
      " [ 15.  15.  15. ...,  47.  41.  46.]]\n",
      "[[  12.   12.   12. ...,   89.   79.   68.]\n",
      " [  12.   12.   12. ...,   86.   77.   70.]\n",
      " [  12.   12.   12. ...,   88.   80.   70.]\n",
      " ..., \n",
      " [  11.   11.   12. ...,  150.  158.  160.]\n",
      " [  12.   12.   11. ...,  146.  154.  157.]\n",
      " [  12.   11.   11. ...,  143.  145.  153.]]\n",
      "[[  34.   50.   58. ...,  128.  107.  123.]\n",
      " [  31.   50.   55. ...,  159.  154.  157.]\n",
      " [  26.   57.   57. ...,  148.  148.  150.]\n",
      " ..., \n",
      " [  49.   35.   40. ...,   73.   81.   83.]\n",
      " [  33.   41.   71. ...,   71.   91.  105.]\n",
      " [  31.   48.   60. ...,   72.   84.   97.]]\n",
      "[[  49.   53.   68. ...,   89.   83.  110.]\n",
      " [  49.   51.  103. ...,   89.   88.  104.]\n",
      " [  53.   59.  118. ...,  108.   94.  107.]\n",
      " ..., \n",
      " [ 155.  142.  128. ...,  106.  141.  145.]\n",
      " [ 132.  114.  157. ...,   82.   74.   89.]\n",
      " [ 104.  115.  154. ...,   87.   85.   82.]]\n",
      "[[  21.   23.   33. ...,   69.   79.   82.]\n",
      " [  17.   37.   54. ...,   62.   70.   80.]\n",
      " [  24.   69.   79. ...,   66.   73.   77.]\n",
      " ..., \n",
      " [  64.   61.   62. ...,  100.  101.   97.]\n",
      " [  63.   62.   62. ...,  101.  101.  104.]\n",
      " [  66.   64.   59. ...,  107.  104.  100.]]\n",
      "[[ 22.  47.  63. ...,  56.  57.  60.]\n",
      " [ 47.  60.  65. ...,  57.  57.  58.]\n",
      " [ 64.  67.  63. ...,  57.  57.  58.]\n",
      " ..., \n",
      " [ 73.  66.  63. ...,  77.  71.  63.]\n",
      " [ 80.  70.  67. ...,  69.  62.  58.]\n",
      " [ 90.  78.  75. ...,  65.  63.  61.]]\n",
      "[[  45.   53.   56. ...,  255.  255.  255.]\n",
      " [  48.   57.   67. ...,  255.  255.  255.]\n",
      " [  57.   72.  108. ...,  255.  255.  255.]\n",
      " ..., \n",
      " [  81.   81.   80. ...,  255.  255.  255.]\n",
      " [  82.   81.   81. ...,  255.  255.  255.]\n",
      " [  84.   80.   80. ...,  255.  255.  255.]]\n",
      "[[ 32.  34.  41. ...,  85.  86.  85.]\n",
      " [ 35.  37.  57. ...,  83.  84.  85.]\n",
      " [ 34.  40.  74. ...,  83.  84.  84.]\n",
      " ..., \n",
      " [ 99.  95.  94. ...,  90.  91.  90.]\n",
      " [ 99.  95.  93. ...,  91.  91.  91.]\n",
      " [ 95.  96.  96. ...,  91.  91.  90.]]\n",
      "[[  29.   23.   34. ...,   22.   17.   21.]\n",
      " [  37.   36.   36. ...,   26.   28.   57.]\n",
      " [  80.   81.   66. ...,   22.   36.   69.]\n",
      " ..., \n",
      " [  98.   94.   90. ...,  125.  127.  124.]\n",
      " [  94.   93.   92. ...,  119.  118.  128.]\n",
      " [ 100.   98.   93. ...,  115.  113.  132.]]\n",
      "[[  44.   48.   49. ...,   40.   40.   40.]\n",
      " [  51.   44.   36. ...,   45.   46.   46.]\n",
      " [  91.  124.  153. ...,   42.   44.   44.]\n",
      " ..., \n",
      " [ 128.  126.  136. ...,  122.  125.  133.]\n",
      " [ 136.  131.  129. ...,  129.  136.  139.]\n",
      " [ 133.  127.  126. ...,  133.  134.  134.]]\n",
      "[[   9.   10.   49. ...,  110.   65.   49.]\n",
      " [   4.   53.   87. ...,   76.   81.   64.]\n",
      " [  13.   36.   63. ...,   73.   69.   70.]\n",
      " ..., \n",
      " [  21.   27.   41. ...,   83.   82.   86.]\n",
      " [  15.   21.   37. ...,   81.   80.   88.]\n",
      " [  10.   10.   24. ...,   81.   82.   83.]]\n",
      "[[ 11.  11.  15. ...,  11.  11.  11.]\n",
      " [ 16.  16.  18. ...,  11.  11.  11.]\n",
      " [ 15.  16.  16. ...,  11.  11.  11.]\n",
      " ..., \n",
      " [ 54.  48.  45. ...,  98.  95.  87.]\n",
      " [ 54.  37.  42. ...,  94.  93.  86.]\n",
      " [ 46.  38.  43. ...,  88.  88.  92.]]\n",
      "[[  80.  138.  143. ...,  130.  144.  147.]\n",
      " [ 127.  144.  136. ...,  151.  149.  150.]\n",
      " [ 137.  133.  133. ...,  150.  150.  153.]\n",
      " ..., \n",
      " [  11.   11.   11. ...,  135.  169.  159.]\n",
      " [  11.   11.   11. ...,  131.  182.  187.]\n",
      " [  11.   11.   11. ...,  140.  179.  136.]]\n",
      "[[ 101.  145.  151. ...,  137.  134.  127.]\n",
      " [  96.  100.  126. ...,  107.  107.  106.]\n",
      " [  80.   93.  137. ...,   38.   39.   41.]\n",
      " ..., \n",
      " [ 125.  122.  121. ...,  121.  123.  127.]\n",
      " [ 127.  104.  102. ...,  121.  114.  108.]\n",
      " [ 103.  112.   97. ...,  116.  119.  117.]]\n",
      "[[  42.   41.   41. ...,   86.   96.  141.]\n",
      " [  42.   42.   42. ...,  110.  135.  110.]\n",
      " [  42.   42.   43. ...,  126.   94.   83.]\n",
      " ..., \n",
      " [  87.   74.   65. ...,   98.   99.   99.]\n",
      " [  87.   72.   66. ...,   72.   97.  105.]\n",
      " [  85.   72.   66. ...,   87.   97.   97.]]\n",
      "[[  16.   16.   16. ...,   16.   16.   16.]\n",
      " [  16.   16.   16. ...,   16.   16.   16.]\n",
      " [  16.   16.   16. ...,   16.   16.   16.]\n",
      " ..., \n",
      " [  29.   77.   77. ...,  103.  100.  100.]\n",
      " [   8.   75.  103. ...,   99.   97.   97.]\n",
      " [   8.   27.   96. ...,   77.   79.   75.]]\n",
      "[[ 119.  193.  246. ...,   38.  146.  158.]\n",
      " [ 146.  161.  227. ...,   41.  139.  138.]\n",
      " [ 185.  127.  175. ...,   21.   29.   43.]\n",
      " ..., \n",
      " [ 254.  255.  248. ...,  102.   99.   99.]\n",
      " [ 255.  254.  248. ...,   73.  103.   81.]\n",
      " [ 240.  248.  233. ...,   66.   48.  107.]]\n",
      "[[ 64.  70.  70. ...,  52.  26.  13.]\n",
      " [ 63.  69.  71. ...,  57.  35.  16.]\n",
      " [ 63.  68.  71. ...,  62.  44.  24.]\n",
      " ..., \n",
      " [ 11.  11.  11. ...,  15.   9.  11.]\n",
      " [ 11.  11.  11. ...,   8.  12.  11.]\n",
      " [ 11.  11.  11. ...,  11.  11.  11.]]\n",
      "[[  59.   74.   84. ...,   85.   87.   87.]\n",
      " [  96.   99.  103. ...,   94.   95.   96.]\n",
      " [ 145.  147.  146. ...,  102.  106.  111.]\n",
      " ..., \n",
      " [  13.   16.   15. ...,   14.   13.   15.]\n",
      " [  16.   15.   14. ...,   12.   16.   15.]\n",
      " [  15.   15.   15. ...,   15.   15.   15.]]\n",
      "[[  35.   39.   55. ...,  128.  129.  130.]\n",
      " [  33.   41.   76. ...,  130.  130.  133.]\n",
      " [  32.   77.  128. ...,  131.  131.  132.]\n",
      " ..., \n",
      " [ 184.  188.  187. ...,  161.  150.  129.]\n",
      " [ 177.  173.  173. ...,  174.  178.  161.]\n",
      " [ 175.  163.  169. ...,  165.  172.  168.]]\n",
      "[[  15.   16.   17. ...,   11.   13.   34.]\n",
      " [  17.   18.   18. ...,   12.   13.   23.]\n",
      " [  18.   18.   18. ...,   12.   13.   10.]\n",
      " ..., \n",
      " [  16.   16.   14. ...,  232.  226.  226.]\n",
      " [  16.   15.   14. ...,  232.  227.  226.]\n",
      " [  17.   14.   13. ...,  229.  226.  224.]]\n",
      "[[  15.   20.   21. ...,   36.   33.   36.]\n",
      " [  16.   12.   13. ...,   35.   38.   37.]\n",
      " [  12.   12.   14. ...,   30.   37.   41.]\n",
      " ..., \n",
      " [ 100.  104.  103. ...,  116.  109.   90.]\n",
      " [ 105.  108.  105. ...,  110.  104.   91.]\n",
      " [ 108.  100.   98. ...,  100.  102.   86.]]\n",
      "[[  35.   42.   41. ...,   55.   21.   14.]\n",
      " [  41.   44.   37. ...,   54.   30.   18.]\n",
      " [  38.   47.   46. ...,   52.   40.   25.]\n",
      " ..., \n",
      " [  66.   53.   55. ...,   28.   31.   33.]\n",
      " [  99.   92.   90. ...,   36.   39.   43.]\n",
      " [  92.   97.  101. ...,   28.   35.   36.]]\n",
      "[[ 33.  33.  35. ...,  19.  19.  20.]\n",
      " [ 33.  34.  38. ...,  19.  18.  19.]\n",
      " [ 33.  35.  38. ...,  18.  17.  18.]\n",
      " ..., \n",
      " [ 11.  12.  11. ...,  17.  10.  13.]\n",
      " [ 11.  12.  11. ...,  15.  10.  12.]\n",
      " [ 11.  11.  11. ...,  24.  20.  13.]]\n",
      "[[  38.   45.   39. ...,   39.   41.   41.]\n",
      " [  46.   38.   41. ...,   40.   40.   39.]\n",
      " [  40.   42.   65. ...,   48.   40.   41.]\n",
      " ..., \n",
      " [ 148.  160.  159. ...,  158.   63.   40.]\n",
      " [ 161.  160.  152. ...,  161.   54.   42.]\n",
      " [ 158.  157.  152. ...,   41.   40.   43.]]\n",
      "[[  10.   13.   13. ...,   12.   10.   11.]\n",
      " [  11.   11.    6. ...,   13.   12.   12.]\n",
      " [  10.   13.    6. ...,   20.   15.    9.]\n",
      " ..., \n",
      " [  30.   71.  237. ...,   11.   11.   10.]\n",
      " [  39.   45.  192. ...,   11.   10.   12.]\n",
      " [  37.   35.   92. ...,   11.   11.   13.]]\n",
      "[[ 12.  12.  13. ...,  15.  14.  23.]\n",
      " [ 11.   8.  12. ...,   9.  11.  12.]\n",
      " [ 10.  12.  11. ...,  13.   9.  16.]\n",
      " ..., \n",
      " [ 12.  11.  25. ...,  20.  13.  11.]\n",
      " [  9.  10.  17. ...,  28.  22.   9.]\n",
      " [ 11.   7.   9. ...,  64.  64.  45.]]\n",
      "[[  21.   22.   28. ...,  128.  130.  137.]\n",
      " [  20.   30.   29. ...,  130.  131.  136.]\n",
      " [  22.   34.   31. ...,  133.  136.  127.]\n",
      " ..., \n",
      " [  73.  155.  152. ...,   70.   70.   68.]\n",
      " [  44.  122.  154. ...,   69.   69.   72.]\n",
      " [  27.   91.  157. ...,   74.   69.   68.]]\n",
      "[[  41.   50.   57. ...,   13.   13.   10.]\n",
      " [  48.   55.   56. ...,   10.   15.   11.]\n",
      " [  38.   47.   50. ...,   21.   10.   10.]\n",
      " ..., \n",
      " [ 137.  142.  127. ...,   24.   20.   17.]\n",
      " [ 136.  135.  117. ...,   24.   21.   17.]\n",
      " [ 131.  127.  114. ...,   22.   19.   17.]]\n",
      "[[ 117.  115.  116. ...,   12.   10.   11.]\n",
      " [ 117.  116.  116. ...,   12.   12.   11.]\n",
      " [ 118.  118.  119. ...,   12.   11.   11.]\n",
      " ..., \n",
      " [ 104.  110.   94. ...,   14.   15.   12.]\n",
      " [ 105.  109.   83. ...,   11.   14.   12.]\n",
      " [  94.   98.   98. ...,   14.   12.   12.]]\n",
      "[[  52.   81.  110. ...,   97.   97.   98.]\n",
      " [  83.  124.  123. ...,   97.   98.   96.]\n",
      " [  94.  131.  118. ...,   97.   97.   96.]\n",
      " ..., \n",
      " [ 133.  141.  136. ...,  110.  110.  112.]\n",
      " [ 135.  142.  136. ...,  111.  111.  109.]\n",
      " [ 134.  140.  137. ...,  111.  111.  110.]]\n",
      "[[ 56.  55.  54. ...,  74.  74.  76.]\n",
      " [ 56.  55.  54. ...,  74.  74.  76.]\n",
      " [ 57.  57.  56. ...,  74.  75.  76.]\n",
      " ..., \n",
      " [ 77.  76.  75. ...,  35.  33.  33.]\n",
      " [ 36.  32.  32. ...,   7.   7.   5.]\n",
      " [ 19.  19.  21. ...,   7.   6.   7.]]\n",
      "[[  84.   71.   60. ...,   11.   11.   11.]\n",
      " [  86.   74.   62. ...,   11.   11.   11.]\n",
      " [  82.   75.   66. ...,   11.   11.   11.]\n",
      " ..., \n",
      " [  86.   83.   76. ...,  114.  111.  124.]\n",
      " [  80.   77.   71. ...,  104.  100.  113.]\n",
      " [  76.   71.   67. ...,   94.   93.  104.]]\n",
      "[[ 30.  30.  29. ...,  50.  45.  41.]\n",
      " [ 28.  28.  29. ...,  54.  49.  44.]\n",
      " [ 29.  29.  29. ...,  58.  52.  47.]\n",
      " ..., \n",
      " [ 46.  46.  46. ...,  30.  30.  30.]\n",
      " [ 46.  46.  46. ...,  30.  30.  30.]\n",
      " [ 44.  47.  47. ...,  29.  29.  30.]]\n",
      "[[  88.   65.   47. ...,  191.  221.  239.]\n",
      " [  83.   82.   63. ...,  189.  239.  219.]\n",
      " [  94.   79.   72. ...,  201.  250.  204.]\n",
      " ..., \n",
      " [  67.   63.   68. ...,   40.   27.   47.]\n",
      " [  69.   72.   88. ...,   30.   37.   75.]\n",
      " [  70.   65.   77. ...,   39.   41.   72.]]\n",
      "[[ 146.  141.  115. ...,   32.   20.   13.]\n",
      " [ 170.  171.  144. ...,   29.   24.   14.]\n",
      " [ 161.  169.  137. ...,   27.   19.   15.]\n",
      " ..., \n",
      " [ 171.  186.  169. ...,  191.   53.   48.]\n",
      " [ 172.  181.  166. ...,  188.   46.   48.]\n",
      " [ 187.  181.  162. ...,  118.   45.   48.]]\n",
      "[[  58.   62.   61. ...,   56.   53.   51.]\n",
      " [  61.   68.  102. ...,   64.   59.   56.]\n",
      " [ 123.  122.  163. ...,   61.   64.   64.]\n",
      " ..., \n",
      " [  90.   83.   80. ...,   81.   96.   94.]\n",
      " [  97.   97.   95. ...,   83.   82.   72.]\n",
      " [ 103.  100.  106. ...,   71.   67.   65.]]\n",
      "[[ 23.  23.  23. ...,  78.  62.  33.]\n",
      " [ 22.  22.  22. ...,  87.  81.  56.]\n",
      " [ 22.  22.  22. ...,  87.  90.  85.]\n",
      " ..., \n",
      " [ 43.  42.  39. ...,  32.  32.  30.]\n",
      " [ 45.  42.  39. ...,  27.  28.  28.]\n",
      " [ 52.  46.  49. ...,  24.  26.  24.]]\n",
      "[[ 62.  75.  57. ...,  57.  47.  52.]\n",
      " [ 47.  56.  45. ...,  35.  35.  43.]\n",
      " [ 50.  66.  67. ...,  39.  42.  32.]\n",
      " ..., \n",
      " [ 70.  75.  85. ...,  26.  32.  22.]\n",
      " [ 84.  83.  79. ...,  19.  23.  28.]\n",
      " [ 72.  69.  85. ...,  22.  21.  24.]]\n",
      "[[  93.  110.  120. ...,   81.   82.   78.]\n",
      " [ 114.  115.  115. ...,   83.   83.   81.]\n",
      " [ 118.  116.  116. ...,   84.   85.   83.]\n",
      " ..., \n",
      " [ 101.  102.  103. ...,   82.   85.   83.]\n",
      " [  97.   98.   99. ...,   80.   83.   80.]\n",
      " [  97.   97.   97. ...,   79.   79.   77.]]\n",
      "[[  49.   50.   51. ...,   25.   26.   26.]\n",
      " [  48.   49.   50. ...,   25.   26.   25.]\n",
      " [  49.   51.   52. ...,   24.   24.   24.]\n",
      " ..., \n",
      " [ 102.   91.   97. ...,  152.  163.  160.]\n",
      " [  93.   99.  103. ...,  129.  138.  165.]\n",
      " [  90.  102.   96. ...,  128.  116.  114.]]\n",
      "[[   3.   18.   27. ...,   45.   42.   35.]\n",
      " [  16.   41.   59. ...,   86.   82.   82.]\n",
      " [  60.   92.   98. ...,   96.   92.  101.]\n",
      " ..., \n",
      " [  29.   51.   40. ...,   49.   47.   39.]\n",
      " [  11.   42.   39. ...,   43.   46.   42.]\n",
      " [   6.    7.   13. ...,   46.   44.   42.]]\n",
      "[[ 41.  44.  43. ...,  49.  46.  48.]\n",
      " [ 44.  47.  44. ...,  47.  46.  47.]\n",
      " [ 45.  47.  47. ...,  48.  48.  45.]\n",
      " ..., \n",
      " [ 48.  43.  45. ...,  31.  30.  30.]\n",
      " [ 41.  46.  44. ...,  31.  30.  30.]\n",
      " [ 44.  43.  46. ...,  29.  31.  30.]]\n",
      "[[  74.   77.   71. ...,   89.   86.   87.]\n",
      " [  73.   74.   67. ...,   88.   86.   87.]\n",
      " [  73.   73.   66. ...,   87.   85.   84.]\n",
      " ..., \n",
      " [  80.  102.  129. ...,   75.   79.   72.]\n",
      " [  78.  104.  134. ...,   73.   79.   75.]\n",
      " [  81.  106.  134. ...,   73.   79.   75.]]\n",
      "[[ 55.  55.  59. ...,  86.  88.  92.]\n",
      " [ 53.  58.  57. ...,  82.  88.  90.]\n",
      " [ 44.  56.  62. ...,  89.  91.  93.]\n",
      " ..., \n",
      " [ 67.  46.  48. ...,  55.  57.  56.]\n",
      " [ 40.  49.  71. ...,  51.  58.  56.]\n",
      " [ 61.  56.  62. ...,  60.  62.  53.]]\n",
      "[[ 114.  116.  117. ...,   11.   11.   11.]\n",
      " [ 114.  116.  117. ...,   10.   13.   11.]\n",
      " [ 113.  116.  122. ...,   10.   11.   11.]\n",
      " ..., \n",
      " [ 146.  148.  150. ...,  103.  111.  110.]\n",
      " [ 142.  143.  147. ...,  100.   83.   68.]\n",
      " [ 136.  147.  150. ...,   90.   87.   87.]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  71.   88.   88. ...,   95.   93.   94.]\n",
      " [ 104.   97.   91. ...,   96.   91.   91.]\n",
      " [ 109.  106.   99. ...,   98.   94.   89.]\n",
      " ..., \n",
      " [ 167.  168.  166. ...,  150.  146.  146.]\n",
      " [ 165.  165.  162. ...,  137.  144.  144.]\n",
      " [ 162.  157.  161. ...,  147.  143.  140.]]\n",
      "[[  78.   79.   81. ...,  216.  221.  221.]\n",
      " [  76.   78.   77. ...,  222.  225.  224.]\n",
      " [  80.   77.   78. ...,  223.  221.  223.]\n",
      " ..., \n",
      " [ 112.  110.  114. ...,  144.  154.  149.]\n",
      " [ 105.  106.  103. ...,  159.  153.  151.]\n",
      " [ 105.   95.   90. ...,  151.  142.  149.]]\n",
      "[[  14.   15.   20. ...,   53.   46.   39.]\n",
      " [  19.   21.   51. ...,  106.  106.  105.]\n",
      " [  26.   41.   86. ...,  103.  105.  102.]\n",
      " ..., \n",
      " [ 104.   87.   94. ...,   98.   99.   99.]\n",
      " [ 107.   91.   88. ...,   98.  107.  109.]\n",
      " [ 109.   93.   78. ...,  101.  106.  113.]]\n",
      "[[  10.   31.   54. ...,   42.   29.   25.]\n",
      " [  35.   61.   66. ...,   48.   38.   16.]\n",
      " [  58.   67.   68. ...,   54.   13.    7.]\n",
      " ..., \n",
      " [ 115.  107.  107. ...,  128.  126.  119.]\n",
      " [ 117.  110.  109. ...,  125.  123.  120.]\n",
      " [ 121.  115.  113. ...,  120.  119.  118.]]\n",
      "[[  16.   12.   14. ...,   14.   13.   12.]\n",
      " [  85.   81.   83. ...,   15.   12.   13.]\n",
      " [  99.   97.  100. ...,   14.   12.   10.]\n",
      " ..., \n",
      " [ 108.  134.  131. ...,  157.  156.  158.]\n",
      " [ 137.  141.  158. ...,  148.  145.  149.]\n",
      " [ 156.  166.  142. ...,  153.  162.  149.]]\n",
      "[[ 19.  21.  27. ...,  84.  83.  83.]\n",
      " [ 21.  24.  29. ...,  85.  84.  82.]\n",
      " [ 22.  26.  31. ...,  86.  85.  83.]\n",
      " ..., \n",
      " [ 11.  11.   8. ...,  11.  11.  11.]\n",
      " [ 10.  11.   9. ...,  11.  11.  11.]\n",
      " [ 11.  11.   9. ...,  11.  11.  11.]]\n",
      "[[ 123.  125.  125. ...,   87.   85.   84.]\n",
      " [ 124.  125.  125. ...,   90.   88.   91.]\n",
      " [ 126.  127.  128. ...,   94.   94.   96.]\n",
      " ..., \n",
      " [  49.   49.   53. ...,   34.   21.   29.]\n",
      " [  50.   49.   53. ...,   46.   39.   23.]\n",
      " [  52.   54.   59. ...,   10.   25.    7.]]\n",
      "[[ 74.  74.  74. ...,  70.  70.  67.]\n",
      " [ 74.  74.  74. ...,  70.  69.  69.]\n",
      " [ 75.  75.  75. ...,  70.  69.  70.]\n",
      " ..., \n",
      " [ 90.  94.  94. ...,   9.   9.   8.]\n",
      " [ 67.  62.  52. ...,   9.   9.   9.]\n",
      " [ 12.  14.  15. ...,   9.   9.   9.]]\n",
      "[[ 136.  159.  165. ...,  129.  136.  144.]\n",
      " [ 154.  177.  173. ...,  142.  144.  146.]\n",
      " [ 167.  179.  177. ...,  144.  145.  139.]\n",
      " ..., \n",
      " [  48.   49.   49. ...,   51.   51.   51.]\n",
      " [  47.   48.   49. ...,   50.   50.   51.]\n",
      " [  45.   46.   50. ...,   51.   50.   50.]]\n",
      "[[ 249.  247.  248. ...,  246.  249.  253.]\n",
      " [ 247.  248.  249. ...,  245.  249.  253.]\n",
      " [ 247.  249.  250. ...,  246.  248.  252.]\n",
      " ..., \n",
      " [  11.   11.   12. ...,   41.   37.   29.]\n",
      " [  11.   11.   11. ...,   37.   32.   23.]\n",
      " [  11.   11.   11. ...,   32.   24.   18.]]\n",
      "[[ 151.  152.  153. ...,  162.  162.  167.]\n",
      " [ 153.  154.  154. ...,  155.  155.  158.]\n",
      " [ 154.  153.  153. ...,  147.  147.  150.]\n",
      " ..., \n",
      " [ 120.  133.  144. ...,  118.  117.  115.]\n",
      " [ 104.  116.  125. ...,  117.  114.  111.]\n",
      " [  30.   32.   34. ...,   31.   29.   29.]]\n",
      "[[ 16.  14.  14. ...,  22.  26.  29.]\n",
      " [ 15.  14.  15. ...,  26.  31.  32.]\n",
      " [ 15.  14.  15. ...,  29.  35.  37.]\n",
      " ..., \n",
      " [ 52.  51.  50. ...,  47.  46.  38.]\n",
      " [ 51.  49.  48. ...,  48.  46.  38.]\n",
      " [ 43.  50.  49. ...,  48.  44.  37.]]\n",
      "[[  62.   44.   32. ...,  224.  224.  224.]\n",
      " [  64.   46.   31. ...,  224.  223.  224.]\n",
      " [  63.   43.   31. ...,  225.  224.  224.]\n",
      " ..., \n",
      " [  24.   23.   35. ...,  124.   90.   58.]\n",
      " [  20.   27.   23. ...,  121.   80.   48.]\n",
      " [  18.   21.   23. ...,   93.   84.   77.]]\n",
      "[[  11.   11.   11. ...,   41.   37.   40.]\n",
      " [  11.   11.   11. ...,   53.   31.   32.]\n",
      " [  11.   11.   11. ...,   83.   55.  100.]\n",
      " ..., \n",
      " [  11.   11.   11. ...,   11.   11.   11.]\n",
      " [  11.   11.   11. ...,   11.   11.   11.]\n",
      " [  11.   11.   11. ...,   11.   11.   11.]]\n",
      "[[ 141.  143.  143. ...,  114.  114.  113.]\n",
      " [ 142.  142.  142. ...,  114.  113.  115.]\n",
      " [ 143.  142.  142. ...,  113.  112.  111.]\n",
      " ..., \n",
      " [ 108.  113.  224. ...,  244.  239.  248.]\n",
      " [ 107.  120.  231. ...,  241.  245.  242.]\n",
      " [ 105.  135.  244. ...,  249.  245.  243.]]\n",
      "[[ 172.  174.  173. ...,  197.  161.  105.]\n",
      " [ 171.  174.  174. ...,  198.  159.  103.]\n",
      " [ 173.  174.  172. ...,  197.  154.   97.]\n",
      " ..., \n",
      " [ 102.   80.   76. ...,   96.   66.   47.]\n",
      " [  74.   63.   81. ...,   64.   62.   49.]\n",
      " [  70.   86.   97. ...,   60.   65.   58.]]\n",
      "[[  38.   47.   44. ...,   55.   54.   53.]\n",
      " [  42.   44.   47. ...,   67.   55.   60.]\n",
      " [  44.   50.   46. ...,   81.   79.   50.]\n",
      " ..., \n",
      " [  54.   13.   26. ...,   22.   26.   26.]\n",
      " [  19.    0.   77. ...,   42.   28.   15.]\n",
      " [   3.   21.  115. ...,   24.    7.   10.]]\n",
      "[[ 10.  25.  37. ...,  54.  60.  59.]\n",
      " [ 25.  35.  42. ...,  51.  55.  55.]\n",
      " [ 41.  45.  46. ...,  52.  53.  53.]\n",
      " ..., \n",
      " [ 38.  38.  29. ...,  48.  47.  56.]\n",
      " [ 38.  42.  49. ...,  42.  48.  59.]\n",
      " [ 40.  46.  51. ...,  40.  54.  60.]]\n",
      "[[  41.   39.   36. ...,  129.  129.  130.]\n",
      " [  40.   38.   37. ...,  129.  130.  129.]\n",
      " [  37.   38.   37. ...,  127.  128.  133.]\n",
      " ..., \n",
      " [  83.   84.   83. ...,   60.  104.  130.]\n",
      " [  83.   84.   83. ...,   62.  100.  124.]\n",
      " [  79.   81.   82. ...,   81.  119.  128.]]\n",
      "[[ 125.  124.  124. ...,   95.   42.    3.]\n",
      " [ 126.  125.  125. ...,  101.   77.    6.]\n",
      " [ 125.  125.  125. ...,   92.   89.   11.]\n",
      " ..., \n",
      " [  45.   51.   59. ...,   60.   77.   64.]\n",
      " [  70.   52.   38. ...,   51.   75.   67.]\n",
      " [  47.   59.   49. ...,   50.   52.   60.]]\n",
      "[[ 113.  114.  115. ...,   98.   97.   96.]\n",
      " [ 111.  112.  113. ...,   98.   97.   94.]\n",
      " [ 115.  114.  115. ...,   99.   98.   98.]\n",
      " ..., \n",
      " [  66.   73.   75. ...,   51.   48.   61.]\n",
      " [  35.   50.   50. ...,   65.   49.   46.]\n",
      " [  24.   37.   32. ...,   53.   44.   51.]]\n",
      "[[  49.   49.   49. ...,  106.  104.  104.]\n",
      " [  50.   50.   50. ...,  107.  104.  104.]\n",
      " [  51.   51.   52. ...,  106.  104.  106.]\n",
      " ..., \n",
      " [  63.   66.   51. ...,   79.   72.   59.]\n",
      " [  75.   69.   62. ...,   48.   36.   39.]\n",
      " [  50.   37.   49. ...,   28.   31.   25.]]\n",
      "[[ 108.  106.  110. ...,  112.  118.  116.]\n",
      " [ 108.  114.  121. ...,  110.  115.  115.]\n",
      " [ 112.  120.  122. ...,  114.  117.  117.]\n",
      " ..., \n",
      " [  80.   83.   86. ...,   28.   26.   17.]\n",
      " [  73.   72.   79. ...,   15.    7.   10.]\n",
      " [  68.   79.   96. ...,   35.   14.    9.]]\n",
      "[[ 204.  204.  204. ...,  161.  160.  164.]\n",
      " [ 205.  204.  204. ...,  161.  162.  162.]\n",
      " [ 205.  203.  203. ...,  161.  162.  171.]\n",
      " ..., \n",
      " [   8.    8.    9. ...,    5.    5.    5.]\n",
      " [   6.    9.    5. ...,    5.    5.    5.]\n",
      " [   5.    5.    6. ...,    5.    5.    5.]]\n",
      "[[ 152.  154.  153. ...,  143.  142.  142.]\n",
      " [ 156.  156.  154. ...,  143.  145.  141.]\n",
      " [ 151.  153.  155. ...,  143.  145.  143.]\n",
      " ..., \n",
      " [  69.   66.   67. ...,  164.  162.  155.]\n",
      " [  77.   74.   72. ...,  159.  161.  160.]\n",
      " [  80.   83.   73. ...,  158.  146.  143.]]\n",
      "[[ 105.  104.  108. ...,  227.  214.   95.]\n",
      " [ 125.  155.  114. ...,  220.  227.  201.]\n",
      " [ 110.  145.   80. ...,  217.  224.  225.]\n",
      " ..., \n",
      " [  22.   18.   20. ...,   94.   96.   99.]\n",
      " [  26.   19.   19. ...,   85.  104.  104.]\n",
      " [  24.   21.   21. ...,   91.   75.   62.]]\n",
      "[[  7.   6.   7. ...,  49.  48.  49.]\n",
      " [  6.   6.   8. ...,  50.  49.  49.]\n",
      " [  5.   7.   9. ...,  51.  50.  50.]\n",
      " ..., \n",
      " [  9.   7.  12. ...,  66.  67.  68.]\n",
      " [  6.   6.  15. ...,  62.  62.  64.]\n",
      " [  8.   8.  12. ...,  59.  58.  61.]]\n",
      "[[  66.   70.   71. ...,  132.  132.  134.]\n",
      " [  95.  104.  111. ...,  127.  127.  125.]\n",
      " [ 132.  136.  137. ...,  126.  126.  125.]\n",
      " ..., \n",
      " [  77.   76.   78. ...,   88.  108.   99.]\n",
      " [  82.   81.   84. ...,  113.  120.   99.]\n",
      " [ 131.  132.  126. ...,  110.  117.  112.]]\n",
      "[[  54.   63.   73. ...,  236.  236.  236.]\n",
      " [  55.   65.   69. ...,  228.  233.  229.]\n",
      " [  64.   71.   66. ...,  221.  226.  225.]\n",
      " ..., \n",
      " [ 151.  152.  158. ...,   51.   49.   51.]\n",
      " [ 160.  157.  150. ...,   52.   49.   51.]\n",
      " [ 157.  173.  158. ...,   55.   50.   51.]]\n",
      "[[  35.   34.   36. ...,   17.   17.   10.]\n",
      " [  38.   37.   37. ...,   32.   27.   15.]\n",
      " [  54.   79.  115. ...,   46.   38.   23.]\n",
      " ..., \n",
      " [  28.   36.   38. ...,   55.   47.   57.]\n",
      " [  32.   23.   38. ...,   65.   68.   72.]\n",
      " [  24.   30.   21. ...,   70.   69.   71.]]\n",
      "[[ 115.  113.  114. ...,  107.  103.  108.]\n",
      " [ 114.  113.  113. ...,  107.  103.  107.]\n",
      " [ 114.  113.  113. ...,  107.  102.  103.]\n",
      " ..., \n",
      " [ 110.  121.  151. ...,   99.   99.  110.]\n",
      " [ 105.  111.  130. ...,  109.   93.   95.]\n",
      " [  56.   54.   61. ...,   57.   60.   57.]]\n",
      "[[ 142.  143.  145. ...,   82.   82.   81.]\n",
      " [ 143.  143.  144. ...,   83.   83.   81.]\n",
      " [ 144.  144.  144. ...,   83.   83.   83.]\n",
      " ..., \n",
      " [  97.   98.   99. ...,   15.   16.   14.]\n",
      " [  98.   99.   99. ...,   13.   14.   13.]\n",
      " [ 101.  102.  103. ...,    9.    9.    9.]]\n",
      "[[  76.   64.   72. ...,   94.   95.   95.]\n",
      " [  61.   59.   83. ...,  127.  126.  127.]\n",
      " [  91.  106.  197. ...,  119.  121.  123.]\n",
      " ..., \n",
      " [  58.   61.   57. ...,  117.  126.  127.]\n",
      " [  67.   67.   61. ...,  112.  105.  108.]\n",
      " [  66.   61.   66. ...,  108.  100.  111.]]\n",
      "[[  19.   42.   68. ...,   29.   22.   22.]\n",
      " [  27.   76.   83. ...,   26.   21.   22.]\n",
      " [  55.   75.   68. ...,   23.   21.   26.]\n",
      " ..., \n",
      " [ 114.  123.  138. ...,   70.   76.   73.]\n",
      " [ 124.  139.  129. ...,   66.   65.   72.]\n",
      " [ 121.  110.   90. ...,   71.   68.   68.]]\n",
      "[[  66.   66.   71. ...,   92.   93.   85.]\n",
      " [  81.   83.   89. ...,  100.  101.  100.]\n",
      " [  82.   85.   90. ...,   96.   99.   98.]\n",
      " ..., \n",
      " [  79.   76.   64. ...,   46.   44.   42.]\n",
      " [  67.   56.   71. ...,   42.   43.   42.]\n",
      " [  74.   65.   83. ...,   42.   44.   43.]]\n",
      "[[ 25.  26.  27. ...,  71.  70.  57.]\n",
      " [ 42.  43.  44. ...,  68.  67.  71.]\n",
      " [ 60.  60.  61. ...,  66.  66.  65.]\n",
      " ..., \n",
      " [ 26.  26.  26. ...,  27.  27.  27.]\n",
      " [ 26.  26.  26. ...,  27.  27.  26.]\n",
      " [ 27.  26.  25. ...,  27.  27.  27.]]\n",
      "[[ 239.  240.  240. ...,  239.  237.  238.]\n",
      " [ 240.  241.  241. ...,  239.  238.  238.]\n",
      " [ 240.  240.  241. ...,  240.  240.  238.]\n",
      " ..., \n",
      " [ 154.  172.  182. ...,  170.  178.  185.]\n",
      " [ 146.  142.  151. ...,  178.  175.  172.]\n",
      " [ 152.  144.  145. ...,  171.  172.  155.]]\n",
      "[[  8.   8.   8. ...,  55.  54.  55.]\n",
      " [  8.   8.   8. ...,  55.  54.  54.]\n",
      " [  8.   8.   8. ...,  56.  55.  56.]\n",
      " ..., \n",
      " [ 10.  10.   9. ...,   9.   9.   8.]\n",
      " [ 11.  11.  10. ...,   9.   7.   9.]\n",
      " [ 11.  10.  10. ...,  10.  10.   9.]]\n",
      "[[ 112.  110.  109. ...,  114.  115.  116.]\n",
      " [ 114.  113.  112. ...,  114.  115.  112.]\n",
      " [ 115.  115.  115. ...,  114.  114.  109.]\n",
      " ..., \n",
      " [  74.   89.   88. ...,   12.   10.   11.]\n",
      " [  73.   66.   77. ...,   20.   16.    8.]\n",
      " [ 109.   88.   73. ...,   12.    6.    5.]]\n",
      "[[ 224.  212.  213. ...,  157.  157.  157.]\n",
      " [ 216.  212.  212. ...,  158.  159.  156.]\n",
      " [ 214.  212.  216. ...,  159.  160.  157.]\n",
      " ..., \n",
      " [  11.   71.  100. ...,   61.   61.   62.]\n",
      " [   6.   57.  102. ...,   62.   61.   63.]\n",
      " [   5.   27.   83. ...,   58.   62.   65.]]\n",
      "[[  29.   31.   42. ...,   75.   79.   91.]\n",
      " [  25.   24.   31. ...,   93.  103.  101.]\n",
      " [  20.   25.   22. ...,   97.   89.   93.]\n",
      " ..., \n",
      " [ 137.  134.  121. ...,   58.   57.   55.]\n",
      " [ 129.  136.  132. ...,   53.   60.   56.]\n",
      " [ 133.  130.  143. ...,   51.   58.   59.]]\n",
      "[[  62.   66.   67. ...,  253.  253.  252.]\n",
      " [  65.   68.   71. ...,  252.  253.  254.]\n",
      " [  66.   70.   88. ...,  252.  253.  253.]\n",
      " ..., \n",
      " [  58.  140.  218. ...,  198.  195.  193.]\n",
      " [  62.  137.  222. ...,  199.  202.  210.]\n",
      " [  60.  131.  216. ...,  208.  205.  205.]]\n",
      "[[ 136.  136.  136. ...,  130.  128.  129.]\n",
      " [ 137.  136.  137. ...,  131.  131.  130.]\n",
      " [ 137.  137.  137. ...,  133.  133.  131.]\n",
      " ..., \n",
      " [  55.   54.   80. ...,  159.  159.  159.]\n",
      " [  49.   55.   55. ...,  161.  161.  163.]\n",
      " [  44.   46.   46. ...,  171.  173.  176.]]\n",
      "[[  56.   55.   55. ...,  252.  251.  251.]\n",
      " [  54.   54.   54. ...,  250.  250.  250.]\n",
      " [  53.   53.   53. ...,  249.  249.  249.]\n",
      " ..., \n",
      " [  38.   37.   38. ...,   48.   52.   54.]\n",
      " [  39.   38.   38. ...,   47.   51.   54.]\n",
      " [  38.   38.   36. ...,   47.   53.   56.]]\n",
      "[[ 145.  147.  148. ...,  133.  133.  134.]\n",
      " [ 148.  149.  149. ...,  133.  132.  133.]\n",
      " [ 147.  147.  147. ...,  131.  133.  133.]\n",
      " ..., \n",
      " [  76.  102.   71. ...,   30.   38.   51.]\n",
      " [  82.   93.   51. ...,   42.   39.   39.]\n",
      " [  84.   83.   37. ...,   41.   39.   36.]]\n",
      "[[ 182.  182.  183. ...,  154.  153.  153.]\n",
      " [ 182.  183.  184. ...,  156.  155.  155.]\n",
      " [ 182.  183.  184. ...,  156.  155.  153.]\n",
      " ..., \n",
      " [  87.  103.  140. ...,   97.   80.   94.]\n",
      " [ 112.   94.   97. ...,  125.  108.  123.]\n",
      " [ 155.  120.   82. ...,  140.  137.  114.]]\n",
      "[[ 114.  115.  111. ...,   87.   62.   61.]\n",
      " [ 111.  113.  126. ...,   72.   62.   50.]\n",
      " [ 100.  103.  115. ...,   57.   60.   38.]\n",
      " ..., \n",
      " [  64.   59.   56. ...,  109.  104.  103.]\n",
      " [  76.   67.   65. ...,  108.  104.  106.]\n",
      " [  87.   83.   74. ...,  105.  103.  105.]]\n",
      "[[  44.   45.   56. ...,  109.  108.  103.]\n",
      " [  43.   44.   50. ...,   99.  100.  103.]\n",
      " [  39.   43.   46. ...,   98.  104.  102.]\n",
      " ..., \n",
      " [ 123.  119.  121. ...,  129.  126.  138.]\n",
      " [ 111.  116.  120. ...,  157.  159.  177.]\n",
      " [ 123.  123.  123. ...,  195.  199.  196.]]\n",
      "[[ 154.  157.  157. ...,  134.  135.  135.]\n",
      " [ 153.  156.  155. ...,  135.  135.  136.]\n",
      " [ 154.  156.  154. ...,  136.  136.  135.]\n",
      " ..., \n",
      " [  82.   84.   85. ...,   91.   94.   86.]\n",
      " [  82.   85.   81. ...,   86.   92.   83.]\n",
      " [  79.   81.   82. ...,   86.   87.   81.]]\n",
      "[[  53.   66.   76. ...,   85.   85.   85.]\n",
      " [  72.   78.   81. ...,   85.   84.   85.]\n",
      " [  80.   80.   78. ...,   83.   83.   83.]\n",
      " ..., \n",
      " [ 138.  137.  138. ...,  133.  117.  120.]\n",
      " [ 137.  138.  141. ...,  129.  136.  130.]\n",
      " [ 147.  146.  141. ...,  120.  129.  130.]]\n",
      "[[  41.   39.   38. ...,   41.   41.   41.]\n",
      " [  42.   43.   40. ...,   41.   41.   41.]\n",
      " [  40.   42.   47. ...,   41.   41.   41.]\n",
      " ..., \n",
      " [  60.   57.   68. ...,  122.  119.  131.]\n",
      " [  45.   54.  106. ...,  125.  112.  147.]\n",
      " [ 132.  169.  167. ...,  129.  115.  141.]]\n",
      "[[ 255.  255.  255. ...,   68.   68.   66.]\n",
      " [ 255.  255.  255. ...,   67.   67.   66.]\n",
      " [ 255.  255.  255. ...,   72.   72.   71.]\n",
      " ..., \n",
      " [  43.   47.   49. ...,   51.   47.   51.]\n",
      " [  42.   48.   50. ...,   52.   49.   52.]\n",
      " [  44.   45.   49. ...,   46.   44.   47.]]\n",
      "[[  50.   55.   51. ...,  147.  112.  119.]\n",
      " [  52.   51.   51. ...,  139.  143.  176.]\n",
      " [  54.   50.   51. ...,  152.   88.   97.]\n",
      " ..., \n",
      " [  35.   34.   40. ...,  128.  113.  122.]\n",
      " [  43.   44.   37. ...,  251.  224.  180.]\n",
      " [  41.   40.   37. ...,  192.  255.  224.]]\n",
      "[[  10.   13.   30. ...,  108.  107.  103.]\n",
      " [  18.   32.   35. ...,  111.  111.  111.]\n",
      " [  35.   41.   33. ...,  111.  110.  107.]\n",
      " ..., \n",
      " [  12.   12.    9. ...,  104.  102.   98.]\n",
      " [   9.    7.    8. ...,  106.  102.   97.]\n",
      " [  14.   20.   22. ...,  101.  102.  100.]]\n",
      "[[  47.   48.   50. ...,   51.   51.   52.]\n",
      " [  50.   49.   49. ...,   52.   52.   53.]\n",
      " [  49.   49.   49. ...,   52.   53.   53.]\n",
      " ..., \n",
      " [  37.   36.   35. ...,  103.   89.   66.]\n",
      " [  37.   36.   35. ...,   83.   59.   47.]\n",
      " [  36.   39.   39. ...,   41.   36.   36.]]\n",
      "[[  52.   67.   77. ...,   58.   54.   56.]\n",
      " [  72.   95.  112. ...,   57.   61.   57.]\n",
      " [  97.  114.  123. ...,   66.   67.   68.]\n",
      " ..., \n",
      " [ 202.  186.  160. ...,  181.  183.  182.]\n",
      " [ 203.  195.  164. ...,  189.  189.  192.]\n",
      " [ 150.  186.  202. ...,  187.  195.  201.]]\n",
      "[[  96.  131.  153. ...,  149.  150.  149.]\n",
      " [ 102.  138.  157. ...,  149.  149.  147.]\n",
      " [ 105.  142.  155. ...,  149.  147.  148.]\n",
      " ..., \n",
      " [  51.   51.   52. ...,   55.   55.   55.]\n",
      " [  51.   52.   53. ...,   53.   53.   53.]\n",
      " [  51.   51.   55. ...,   53.   52.   53.]]\n",
      "[[ 255.  253.  246. ...,   86.   68.   78.]\n",
      " [ 150.  232.  249. ...,   74.   63.   58.]\n",
      " [ 102.  144.  229. ...,   66.   75.   68.]\n",
      " ..., \n",
      " [  91.   91.   86. ...,   61.   59.   66.]\n",
      " [  84.   80.   76. ...,   59.   58.   59.]\n",
      " [  77.   73.   75. ...,   63.   63.   59.]]\n",
      "[[  21.   14.   27. ...,   22.   21.   22.]\n",
      " [  18.   35.   54. ...,   23.   18.   19.]\n",
      " [  46.   62.   65. ...,   47.   35.   25.]\n",
      " ..., \n",
      " [ 150.  142.  155. ...,  119.  122.  130.]\n",
      " [ 136.  132.  153. ...,  106.  109.  129.]\n",
      " [  87.   78.  128. ...,   91.   90.  102.]]\n",
      "[[ 69.  64.  61. ...,  35.  36.  25.]\n",
      " [ 73.  66.  58. ...,  21.  40.  72.]\n",
      " [ 69.  65.  63. ...,  65.  75.  50.]\n",
      " ..., \n",
      " [ 64.  51.  51. ...,  25.  33.  43.]\n",
      " [ 66.  48.  38. ...,  31.  36.  40.]\n",
      " [ 60.  46.  39. ...,  34.  36.  37.]]\n",
      "[[  25.   79.  124. ...,  130.  108.  115.]\n",
      " [  26.   75.  117. ...,  111.  118.  115.]\n",
      " [  28.   79.  118. ...,  102.  110.  126.]\n",
      " ..., \n",
      " [  27.   27.   25. ...,  171.  175.  166.]\n",
      " [  28.   34.   25. ...,  176.  177.  174.]\n",
      " [  29.   30.   28. ...,  182.  177.  176.]]\n",
      "[[ 24.  24.  24. ...,  24.  24.  24.]\n",
      " [ 24.  24.  24. ...,  24.  24.  24.]\n",
      " [ 24.  24.  24. ...,  24.  24.  24.]\n",
      " ..., \n",
      " [ 24.  24.  24. ...,  25.  24.  24.]\n",
      " [ 24.  25.  25. ...,  24.  24.  24.]\n",
      " [ 24.  26.  25. ...,  23.  24.  24.]]\n",
      "[[ 180.  178.  178. ...,  211.  212.  209.]\n",
      " [ 224.  221.  221. ...,  206.  207.  207.]\n",
      " [ 213.  211.  211. ...,  209.  209.  208.]\n",
      " ..., \n",
      " [ 112.  113.  111. ...,  117.  117.  118.]\n",
      " [ 101.  100.  110. ...,  128.  125.  119.]\n",
      " [  88.   97.   98. ...,  111.  117.  112.]]\n",
      "[[ 255.  255.  255. ...,  106.  120.  124.]\n",
      " [ 255.  255.  255. ...,  106.  115.  124.]\n",
      " [ 255.  255.  255. ...,  123.  111.   96.]\n",
      " ..., \n",
      " [ 175.  174.  171. ...,  102.  109.  116.]\n",
      " [ 177.  181.  180. ...,  106.  121.  124.]\n",
      " [ 173.  174.  177. ...,  120.  118.  123.]]\n",
      "[[ 159.  145.  139. ...,   55.   41.   29.]\n",
      " [ 162.  151.  146. ...,  126.   63.   31.]\n",
      " [ 158.  161.  140. ...,  149.   93.   35.]\n",
      " ..., \n",
      " [  37.   37.   37. ...,   90.   74.   28.]\n",
      " [  37.   38.   41. ...,  104.   76.   29.]\n",
      " [  44.   45.   42. ...,  107.   88.   28.]]\n",
      "[[ 42.  52.  53. ...,  79.  79.  78.]\n",
      " [ 45.  53.  53. ...,  80.  80.  78.]\n",
      " [ 46.  54.  52. ...,  81.  81.  80.]\n",
      " ..., \n",
      " [ 62.  74.  80. ...,  87.  83.  79.]\n",
      " [ 83.  76.  76. ...,  76.  87.  90.]\n",
      " [ 74.  66.  59. ...,  80.  84.  88.]]\n",
      "[[  6.   3.  35. ...,   7.   8.   7.]\n",
      " [  2.   7.  19. ...,   6.   6.   7.]\n",
      " [  6.  17.  24. ...,   5.   8.   6.]\n",
      " ..., \n",
      " [  4.   2.  15. ...,  40.  92.  50.]\n",
      " [  6.   2.  12. ...,  58.  43.  51.]\n",
      " [  5.   2.   9. ...,  58.  35.  56.]]\n",
      "[[  29.   29.   29. ...,    8.    8.    8.]\n",
      " [  27.   28.   28. ...,    8.    8.    8.]\n",
      " [  26.   26.   27. ...,    8.    8.    8.]\n",
      " ..., \n",
      " [ 123.  113.  118. ...,   99.  107.   96.]\n",
      " [ 121.  112.  117. ...,  106.  111.   95.]\n",
      " [ 120.  119.  117. ...,  110.  117.   93.]]\n",
      "[[  51.   78.   93. ...,  105.  114.  112.]\n",
      " [  98.  126.  118. ...,  108.  127.  111.]\n",
      " [ 103.   81.  100. ...,   96.  116.  109.]\n",
      " ..., \n",
      " [ 137.  135.  123. ...,  114.  102.  109.]\n",
      " [ 133.  126.  119. ...,  108.  100.   95.]\n",
      " [ 139.  128.  116. ...,  109.   83.   85.]]\n",
      "[[ 196.  189.  189. ...,  195.  198.  201.]\n",
      " [ 188.  186.  185. ...,  191.  192.  198.]\n",
      " [ 190.  184.  188. ...,  193.  194.  191.]\n",
      " ..., \n",
      " [ 145.  137.  125. ...,  158.  155.  162.]\n",
      " [ 153.  129.  121. ...,  163.  157.  162.]\n",
      " [ 129.  125.  136. ...,  157.  159.  163.]]\n",
      "[[ 169.  168.  167. ...,  168.  169.  168.]\n",
      " [ 168.  167.  167. ...,  168.  169.  167.]\n",
      " [ 167.  168.  168. ...,  167.  169.  167.]\n",
      " ..., \n",
      " [  60.   37.   30. ...,   52.   35.   53.]\n",
      " [  61.   41.   38. ...,   44.   29.   67.]\n",
      " [  64.   38.   36. ...,   50.   30.  107.]]\n",
      "[[  62.   74.  126. ...,   69.   53.   77.]\n",
      " [  84.  147.  170. ...,   77.   54.   79.]\n",
      " [ 132.  195.  184. ...,   88.   50.   83.]\n",
      " ..., \n",
      " [  77.   76.   97. ...,   63.   70.   80.]\n",
      " [  73.   69.   92. ...,   75.   67.   62.]\n",
      " [  82.   81.   97. ...,   72.   78.   72.]]\n",
      "[[ 106.  104.  103. ...,   90.   92.   89.]\n",
      " [ 107.  108.  109. ...,   78.   79.   75.]\n",
      " [ 109.  110.  109. ...,   84.   89.   85.]\n",
      " ..., \n",
      " [  13.   33.   56. ...,   92.   93.   92.]\n",
      " [   8.   15.   28. ...,   71.   71.   64.]\n",
      " [   9.    8.   18. ...,   36.   36.   33.]]\n",
      "[[   8.    8.    8. ...,    8.    8.    8.]\n",
      " [   8.    8.    8. ...,    8.    8.    8.]\n",
      " [   8.    8.    8. ...,    8.    8.    8.]\n",
      " ..., \n",
      " [   8.    8.    8. ...,  175.  142.  128.]\n",
      " [   8.    8.    8. ...,  133.  118.  108.]\n",
      " [   8.    8.    8. ...,  100.  117.  133.]]\n",
      "[[ 5.  5.  5. ...,  5.  5.  5.]\n",
      " [ 5.  5.  5. ...,  5.  5.  5.]\n",
      " [ 5.  5.  5. ...,  5.  5.  5.]\n",
      " ..., \n",
      " [ 5.  5.  5. ...,  5.  5.  5.]\n",
      " [ 5.  5.  5. ...,  5.  5.  5.]\n",
      " [ 5.  5.  5. ...,  5.  5.  5.]]\n",
      "[[  49.   50.   44. ...,   12.    7.    7.]\n",
      " [  96.   90.   99. ...,   28.   11.    7.]\n",
      " [ 175.  153.  147. ...,   32.   18.    7.]\n",
      " ..., \n",
      " [ 103.   92.   87. ...,  110.  126.  134.]\n",
      " [  95.   91.   94. ...,  120.  108.  128.]\n",
      " [  96.   84.   78. ...,  131.  117.  134.]]\n",
      "[[   6.   81.  146. ...,  158.  157.  164.]\n",
      " [  12.   80.  122. ...,  167.  166.  170.]\n",
      " [  17.  105.  130. ...,  170.  171.  174.]\n",
      " ..., \n",
      " [  11.   10.   22. ...,  125.  121.  140.]\n",
      " [   9.   10.   18. ...,  124.  116.  121.]\n",
      " [  11.   11.   13. ...,  117.  129.  121.]]\n",
      "[[ 60.  59.  59. ...,  20.  19.  18.]\n",
      " [ 60.  59.  59. ...,  22.  21.  20.]\n",
      " [ 61.  60.  59. ...,  23.  23.  21.]\n",
      " ..., \n",
      " [ 72.  71.  70. ...,  43.  48.  49.]\n",
      " [ 70.  69.  68. ...,  45.  41.  36.]\n",
      " [ 68.  65.  69. ...,  78.  48.  28.]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  91.  154.  147. ...,   67.   89.  153.]\n",
      " [  85.  146.  135. ...,  128.  163.  144.]\n",
      " [  84.  146.  125. ...,  205.  187.  138.]\n",
      " ..., \n",
      " [ 107.   96.   95. ...,  164.  163.  170.]\n",
      " [ 116.  100.   96. ...,  168.  166.  159.]\n",
      " [  96.   97.   97. ...,  177.  169.  161.]]\n",
      "[[ 21.  21.  21. ...,  33.  34.  34.]\n",
      " [ 20.  23.  26. ...,  35.  35.  34.]\n",
      " [ 22.  23.  22. ...,  35.  36.  35.]\n",
      " ..., \n",
      " [ 43.  43.  43. ...,  46.  46.  46.]\n",
      " [ 43.  42.  42. ...,  45.  45.  46.]\n",
      " [ 45.  41.  43. ...,  45.  45.  44.]]\n",
      "[[  37.   43.   45. ...,  123.  122.  123.]\n",
      " [  41.   41.   62. ...,  121.  120.  121.]\n",
      " [  36.   49.   93. ...,  120.  120.  120.]\n",
      " ..., \n",
      " [ 115.  113.  115. ...,   82.   83.   81.]\n",
      " [ 120.  116.  116. ...,   84.   85.   85.]\n",
      " [ 106.  122.  116. ...,   86.   86.   86.]]\n",
      "[[  38.   48.   58. ...,   76.   68.   64.]\n",
      " [  45.   50.   84. ...,   76.   76.   71.]\n",
      " [  47.   70.  107. ...,   65.   68.   68.]\n",
      " ..., \n",
      " [  91.   83.   86. ...,   21.   25.   17.]\n",
      " [  79.   97.   95. ...,   24.   22.   25.]\n",
      " [  50.   79.   93. ...,   24.   24.   25.]]\n",
      "[[  5.   5.   6. ...,   7.   7.   7.]\n",
      " [  5.   5.   6. ...,   7.   7.   7.]\n",
      " [  5.   6.   6. ...,   7.   7.   7.]\n",
      " ..., \n",
      " [  6.   6.   4. ...,  23.  22.  21.]\n",
      " [  4.   7.   3. ...,  23.  21.  17.]\n",
      " [  5.   5.   5. ...,   6.   3.   4.]]\n",
      "[[   9.   24.   37. ...,  118.  124.  129.]\n",
      " [   9.   28.   51. ...,  117.  124.  120.]\n",
      " [  13.   39.   85. ...,  121.  126.  122.]\n",
      " ..., \n",
      " [  86.  117.  111. ...,   91.   90.   90.]\n",
      " [  77.  129.  109. ...,   86.   83.   88.]\n",
      " [  57.  105.  111. ...,   93.   93.   93.]]\n",
      "[[ 178.  179.  180. ...,  180.  175.  166.]\n",
      " [ 179.  180.  181. ...,  181.  175.  172.]\n",
      " [ 178.  179.  181. ...,  181.  180.  178.]\n",
      " ..., \n",
      " [  52.   65.   75. ...,    8.   10.    8.]\n",
      " [  23.   30.   37. ...,    9.    7.    8.]\n",
      " [  13.   16.   17. ...,    8.    8.    8.]]\n",
      "[[  87.  102.   88. ...,   12.   10.   10.]\n",
      " [  60.   30.   42. ...,    8.   10.   10.]\n",
      " [  80.   54.   42. ...,    8.   12.   10.]\n",
      " ..., \n",
      " [ 205.  129.  119. ...,    5.    7.    9.]\n",
      " [ 142.  135.  142. ...,    7.   11.    9.]\n",
      " [ 115.   60.   59. ...,   13.   11.    9.]]\n",
      "[[ 51.  42.  42. ...,  44.  47.  47.]\n",
      " [ 49.  43.  44. ...,  53.  50.  55.]\n",
      " [ 50.  45.  47. ...,  50.  51.  50.]\n",
      " ..., \n",
      " [ 24.  29.  32. ...,  27.  26.  26.]\n",
      " [ 12.  22.  22. ...,   4.   4.   3.]\n",
      " [  4.   6.  10. ...,   5.   5.   5.]]\n",
      "[[ 55.  55.  56. ...,  32.  33.  16.]\n",
      " [ 57.  57.  58. ...,  33.  33.  18.]\n",
      " [ 58.  58.  58. ...,  32.  33.  19.]\n",
      " ..., \n",
      " [ 36.  36.  39. ...,  58.  69.  64.]\n",
      " [ 34.  37.  47. ...,  43.  64.  75.]\n",
      " [ 34.  34.  40. ...,  43.  47.  64.]]\n",
      "[[  65.   67.   64. ...,  129.  121.  115.]\n",
      " [  69.   71.   66. ...,  129.  121.  117.]\n",
      " [  73.   74.   70. ...,  130.  124.  117.]\n",
      " ..., \n",
      " [   6.   12.   31. ...,  103.   99.   99.]\n",
      " [   5.   10.   22. ...,   96.  102.   98.]\n",
      " [   6.    5.   17. ...,   87.   88.   88.]]\n",
      "[[  48.   51.   73. ...,  166.  212.  161.]\n",
      " [  82.   27.   31. ...,  153.  210.  162.]\n",
      " [  81.   28.   40. ...,  147.  207.  160.]\n",
      " ..., \n",
      " [  88.   96.   97. ...,  109.  118.   89.]\n",
      " [  70.   91.   97. ...,  101.  125.   86.]\n",
      " [ 103.  104.  105. ...,  105.   98.   71.]]\n",
      "[[  16.  111.  163. ...,  170.  168.  172.]\n",
      " [  16.  115.  166. ...,  171.  169.  172.]\n",
      " [  13.  116.  163. ...,  168.  166.  169.]\n",
      " ..., \n",
      " [  10.    3.   14. ...,   10.   10.   10.]\n",
      " [  11.    9.    9. ...,   11.    8.    8.]\n",
      " [  10.   10.    9. ...,   10.   10.   10.]]\n",
      "[[ 139.  138.  136. ...,  192.  192.  194.]\n",
      " [ 141.  141.  140. ...,  194.  193.  190.]\n",
      " [ 142.  143.  143. ...,  192.  192.  190.]\n",
      " ..., \n",
      " [ 138.  128.  129. ...,  109.  100.  111.]\n",
      " [ 144.  130.  130. ...,  110.  100.  107.]\n",
      " [ 147.  131.  131. ...,  111.  100.  102.]]\n",
      "[[  73.   74.   77. ...,   10.   10.   10.]\n",
      " [  92.  120.  136. ...,   10.   10.   10.]\n",
      " [ 177.  196.  209. ...,   10.   10.   10.]\n",
      " ..., \n",
      " [   8.   16.   16. ...,  124.   15.    6.]\n",
      " [   8.   17.   16. ...,   97.   76.    1.]\n",
      " [  12.   11.   11. ...,   49.   97.   18.]]\n",
      "[[  63.   64.   67. ...,   76.   74.   75.]\n",
      " [  54.   51.   51. ...,   73.   73.   72.]\n",
      " [  61.   61.   62. ...,   92.   91.   82.]\n",
      " ..., \n",
      " [  68.   52.   44. ...,  127.  120.  121.]\n",
      " [  65.   49.   50. ...,  113.  106.  100.]\n",
      " [  73.   58.   55. ...,  142.  138.  129.]]\n",
      "[[ 113.  122.  113. ...,   81.   65.   62.]\n",
      " [ 127.  126.  121. ...,  122.   66.   64.]\n",
      " [ 111.  127.  113. ...,  192.   80.   63.]\n",
      " ..., \n",
      " [ 116.  114.  113. ...,   79.   87.   59.]\n",
      " [ 110.  104.  125. ...,   77.   88.   60.]\n",
      " [ 103.   97.  111. ...,   79.   77.   58.]]\n",
      "[[   8.    8.   10. ...,   11.   10.   10.]\n",
      " [  13.   17.   12. ...,   15.   15.   16.]\n",
      " [  24.   15.   19. ...,   39.   41.   39.]\n",
      " ..., \n",
      " [ 152.  151.  149. ...,  154.  156.  161.]\n",
      " [ 157.  151.  154. ...,  158.  162.  160.]\n",
      " [ 151.  151.  153. ...,  161.  157.  158.]]\n",
      "[[  40.   42.   35. ...,   12.   10.   11.]\n",
      " [  61.   63.   59. ...,   12.   10.   11.]\n",
      " [  57.   58.   56. ...,   11.   11.   11.]\n",
      " ..., \n",
      " [  96.  120.  126. ...,   25.   29.   24.]\n",
      " [ 123.  128.  127. ...,   32.   28.   23.]\n",
      " [ 132.  127.  123. ...,   30.   27.   24.]]\n",
      "[[  11.   11.   11. ...,   60.   45.   35.]\n",
      " [  11.   11.   11. ...,  102.   76.   68.]\n",
      " [  11.   11.   11. ...,   70.   90.   68.]\n",
      " ..., \n",
      " [ 128.  128.  144. ...,   89.   62.   67.]\n",
      " [ 151.  158.  149. ...,   67.   84.   75.]\n",
      " [ 158.  150.  155. ...,   67.   93.   75.]]\n",
      "[[ 13.  14.  15. ...,  10.  10.  11.]\n",
      " [ 17.  17.  17. ...,  11.  10.  11.]\n",
      " [ 18.  18.  17. ...,  14.  11.  11.]\n",
      " ..., \n",
      " [ 17.  18.  18. ...,  18.  18.  19.]\n",
      " [ 16.  17.  18. ...,  18.  18.  18.]\n",
      " [ 17.  18.  18. ...,  19.  19.  19.]]\n",
      "[[ 11.  11.  11. ...,  15.  16.  18.]\n",
      " [ 11.  11.  11. ...,  17.  19.  22.]\n",
      " [ 11.  11.  12. ...,  16.  18.  20.]\n",
      " ..., \n",
      " [ 19.  25.  28. ...,  44.  45.  46.]\n",
      " [ 21.  22.  28. ...,  40.  43.  44.]\n",
      " [ 19.  22.  26. ...,  42.  42.  43.]]\n",
      "[[ 107.  108.  107. ...,   11.   11.   11.]\n",
      " [ 107.  107.  106. ...,   21.   12.   10.]\n",
      " [ 105.  104.  102. ...,   29.   19.   11.]\n",
      " ..., \n",
      " [  70.   70.   73. ...,   19.   20.   21.]\n",
      " [  58.   59.   61. ...,   20.   21.   22.]\n",
      " [  44.   45.   43. ...,   21.   22.   17.]]\n",
      "[[ 37.  29.  23. ...,  48.  57.  60.]\n",
      " [ 38.  29.  23. ...,  57.  65.  64.]\n",
      " [ 37.  30.  23. ...,  69.  75.  72.]\n",
      " ..., \n",
      " [ 60.  55.  53. ...,  67.  65.  63.]\n",
      " [ 59.  54.  53. ...,  65.  63.  64.]\n",
      " [ 60.  56.  56. ...,  62.  62.  63.]]\n",
      "[[  68.   79.   87. ...,   74.   75.   76.]\n",
      " [  63.   67.   67. ...,   75.   76.   74.]\n",
      " [  67.   70.   70. ...,   76.   77.   75.]\n",
      " ..., \n",
      " [  14.   27.   31. ...,  168.  175.  179.]\n",
      " [   9.   22.   28. ...,  183.  183.  187.]\n",
      " [  12.   23.   21. ...,  186.  181.  182.]]\n",
      "[[  19.   53.   68. ...,   94.   98.   70.]\n",
      " [  68.   83.   83. ...,   90.   91.   95.]\n",
      " [  78.   81.   78. ...,   93.   93.   95.]\n",
      " ..., \n",
      " [ 161.  159.  161. ...,  175.  201.  205.]\n",
      " [ 170.  175.  180. ...,  172.  184.  197.]\n",
      " [ 151.  159.  162. ...,  196.  200.  199.]]\n",
      "[[ 79.  80.  81. ...,  11.  11.  11.]\n",
      " [ 81.  82.  83. ...,  13.  12.  11.]\n",
      " [ 80.  81.  82. ...,  12.  10.  11.]\n",
      " ..., \n",
      " [ 11.  11.  11. ...,  11.  11.  11.]\n",
      " [ 12.  10.  10. ...,  11.  11.  11.]\n",
      " [ 11.  11.  11. ...,  11.  11.  11.]]\n",
      "[[  66.   69.  108. ...,   17.   20.   55.]\n",
      " [  76.   78.   92. ...,   51.   70.   77.]\n",
      " [  86.   87.  100. ...,   69.   58.   58.]\n",
      " ..., \n",
      " [ 122.  112.  108. ...,   38.   35.   30.]\n",
      " [ 120.  118.  124. ...,   40.   41.   32.]\n",
      " [ 130.  137.  147. ...,   12.   13.   11.]]\n",
      "[[ 189.  195.  193. ...,  216.  218.  214.]\n",
      " [ 191.  196.  196. ...,  216.  218.  212.]\n",
      " [ 192.  196.  196. ...,  216.  214.  216.]\n",
      " ..., \n",
      " [  19.   10.   16. ...,   58.   61.   62.]\n",
      " [  10.   14.   30. ...,   58.   61.   59.]\n",
      " [  20.   20.   29. ...,   57.   55.   61.]]\n",
      "[[  39.   43.   42. ...,   42.   42.   45.]\n",
      " [  41.   41.   42. ...,   43.   45.   48.]\n",
      " [  41.   42.   45. ...,   41.   47.   45.]\n",
      " ..., \n",
      " [ 107.  104.  111. ...,  111.   99.  110.]\n",
      " [ 104.  106.   86. ...,  103.   98.  103.]\n",
      " [ 123.  129.  124. ...,   98.  103.  103.]]\n",
      "[[  12.   10.   11. ...,   52.   52.   56.]\n",
      " [  11.   10.   11. ...,  101.  100.   98.]\n",
      " [  11.   10.   11. ...,   69.   61.   69.]\n",
      " ..., \n",
      " [  10.   11.   18. ...,  101.  153.   97.]\n",
      " [  10.   10.   17. ...,   39.   45.   42.]\n",
      " [  11.   10.   11. ...,   99.  134.  125.]]\n",
      "[[ 11.  11.  11. ...,  11.  11.  11.]\n",
      " [ 11.  11.  11. ...,  11.  11.  11.]\n",
      " [ 11.  11.  11. ...,  11.  11.  11.]\n",
      " ..., \n",
      " [ 11.  11.  11. ...,  11.  11.  11.]\n",
      " [ 11.  11.  11. ...,  11.  11.  11.]\n",
      " [ 11.  11.  11. ...,  11.  11.  11.]]\n",
      "[[ 100.  102.  102. ...,  115.  114.  115.]\n",
      " [ 100.  101.  102. ...,  115.  118.  116.]\n",
      " [ 100.  101.  101. ...,  116.  116.  116.]\n",
      " ..., \n",
      " [  85.   86.   86. ...,   92.   92.   92.]\n",
      " [  91.   92.   93. ...,   94.   94.   91.]\n",
      " [  62.   67.   63. ...,   93.   93.   92.]]\n",
      "[[ 144.  146.  146. ...,  161.  163.  165.]\n",
      " [ 142.  144.  144. ...,  159.  160.  161.]\n",
      " [ 140.  142.  142. ...,  158.  158.  161.]\n",
      " ..., \n",
      " [ 112.  114.  114. ...,  237.  241.  209.]\n",
      " [ 110.  113.  116. ...,  151.  158.  206.]\n",
      " [ 114.  111.  110. ...,  232.  201.  162.]]\n",
      "[[  36.   35.   35. ...,   14.   26.   29.]\n",
      " [  35.   35.   35. ...,   40.   86.  116.]\n",
      " [  34.   35.   34. ...,  236.  195.  126.]\n",
      " ..., \n",
      " [ 231.  225.  219. ...,  250.  240.  225.]\n",
      " [ 238.  243.  235. ...,  229.  230.  222.]\n",
      " [ 237.  240.  236. ...,  228.  231.  230.]]\n",
      "[[ 134.  131.  128. ...,  191.  189.  190.]\n",
      " [ 184.  184.  180. ...,  192.  189.  183.]\n",
      " [ 170.  172.  168. ...,  191.  187.  184.]\n",
      " ..., \n",
      " [  30.   29.   30. ...,   22.   22.   22.]\n",
      " [  31.   33.   34. ...,   22.   22.   22.]\n",
      " [  31.   31.   36. ...,   22.   22.   22.]]\n",
      "[[  91.  157.  159. ...,   57.   18.   34.]\n",
      " [ 105.  156.  144. ...,   53.   18.   33.]\n",
      " [ 114.  164.  148. ...,   50.   23.   33.]\n",
      " ..., \n",
      " [ 117.   71.   24. ...,  142.  141.  140.]\n",
      " [ 106.   33.   20. ...,  137.  138.  139.]\n",
      " [ 150.   87.   32. ...,  135.  137.  138.]]\n",
      "[[ 51.  51.  51. ...,  15.  14.  15.]\n",
      " [ 50.  52.  53. ...,  17.  17.  15.]\n",
      " [ 52.  53.  54. ...,  13.  15.  15.]\n",
      " ..., \n",
      " [ 73.  69.  71. ...,  43.  39.  36.]\n",
      " [ 77.  74.  79. ...,  44.  38.  36.]\n",
      " [ 43.  31.  31. ...,  43.  38.  34.]]\n",
      "[[  85.  107.  145. ...,   31.   29.   24.]\n",
      " [  94.   94.  158. ...,   33.   32.   25.]\n",
      " [ 107.  121.  129. ...,   30.   27.   25.]\n",
      " ..., \n",
      " [  50.   57.   65. ...,   18.   20.   15.]\n",
      " [  52.   57.   60. ...,   21.   15.   13.]\n",
      " [  66.   63.   59. ...,   15.   15.   13.]]\n",
      "[[ 169.   86.   37. ...,   16.   16.   16.]\n",
      " [ 122.  100.   40. ...,   16.   16.   14.]\n",
      " [  70.  102.   33. ...,   16.   16.   16.]\n",
      " ..., \n",
      " [  58.   76.  149. ...,   23.   27.   14.]\n",
      " [  64.   54.  124. ...,   27.   35.   31.]\n",
      " [  88.   80.   58. ...,   44.   21.   51.]]\n",
      "[[ 55.  55.  56. ...,  60.  62.  59.]\n",
      " [ 55.  55.  55. ...,  58.  60.  63.]\n",
      " [ 56.  55.  55. ...,  57.  58.  64.]\n",
      " ..., \n",
      " [ 62.  62.  63. ...,  52.  41.   8.]\n",
      " [ 61.  61.  62. ...,  53.  42.   7.]\n",
      " [ 61.  61.  61. ...,  51.  42.   7.]]\n",
      "[[  13.   13.   12. ...,   42.   37.   35.]\n",
      " [  13.   13.    8. ...,   75.   72.   72.]\n",
      " [  15.   10.   13. ...,   68.   70.   74.]\n",
      " ..., \n",
      " [  84.   60.  134. ...,  131.  121.  121.]\n",
      " [  88.   55.  101. ...,  139.  131.  134.]\n",
      " [ 101.   53.   52. ...,  141.  129.  146.]]\n",
      "[[  91.   91.   91. ...,  115.  115.  115.]\n",
      " [  91.   92.   92. ...,  116.  116.  116.]\n",
      " [  92.   92.   93. ...,  116.  116.  116.]\n",
      " ..., \n",
      " [  31.   27.   30. ...,   29.   30.   30.]\n",
      " [  29.   29.   29. ...,   29.   30.   28.]\n",
      " [  30.   29.   28. ...,   29.   29.   30.]]\n",
      "[[ 130.  127.  127. ...,  106.  106.  107.]\n",
      " [ 131.  127.  127. ...,  109.  109.  108.]\n",
      " [ 134.  127.  126. ...,  107.  107.  105.]\n",
      " ..., \n",
      " [  67.   83.   70. ...,   30.   30.   53.]\n",
      " [  53.   67.   54. ...,   58.   55.   50.]\n",
      " [  47.   42.   47. ...,   78.   70.   66.]]\n",
      "[[  87.   86.   84. ...,  134.  134.  133.]\n",
      " [  80.   81.   83. ...,  135.  136.  137.]\n",
      " [  75.   77.   81. ...,  136.  138.  138.]\n",
      " ..., \n",
      " [  86.   63.   82. ...,   37.   35.   41.]\n",
      " [  91.   82.   86. ...,   28.   36.   39.]\n",
      " [  73.   80.   77. ...,   29.   28.   43.]]\n",
      "[[  80.  164.  150. ...,  130.  129.  128.]\n",
      " [  94.  162.  148. ...,  126.  126.  124.]\n",
      " [ 113.  158.  144. ...,  129.  128.  124.]\n",
      " ..., \n",
      " [  79.  179.  169. ...,   77.   82.   91.]\n",
      " [  72.  181.  176. ...,   90.   73.   70.]\n",
      " [  52.  113.  126. ...,   32.   39.   47.]]\n",
      "[[  24.   51.   79. ...,   91.   78.   39.]\n",
      " [  61.   97.  108. ...,   91.   91.   80.]\n",
      " [  89.  103.   93. ...,   86.   90.   91.]\n",
      " ..., \n",
      " [  79.   81.   83. ...,   97.  100.  106.]\n",
      " [  82.   82.   81. ...,   96.   99.   99.]\n",
      " [  83.   80.   81. ...,   98.   97.   99.]]\n",
      "[[ 129.  127.  126. ...,  150.  151.  150.]\n",
      " [ 129.  128.  127. ...,  150.  150.  148.]\n",
      " [ 128.  129.  128. ...,  149.  149.  150.]\n",
      " ..., \n",
      " [  19.   18.   12. ...,  110.  102.   83.]\n",
      " [  21.   18.   15. ...,   96.  108.  112.]\n",
      " [  20.    8.   15. ...,   59.   87.  103.]]\n",
      "[[ 211.  200.  202. ...,  218.  231.  158.]\n",
      " [  98.  114.  162. ...,  243.  250.  139.]\n",
      " [  54.   60.  116. ...,  254.  252.  166.]\n",
      " ..., \n",
      " [  30.   54.   87. ...,  193.  140.   60.]\n",
      " [  19.   33.   55. ...,  144.  118.   48.]\n",
      " [  15.   22.   31. ...,   64.   56.   39.]]\n",
      "[[  78.  103.  141. ...,   81.   90.   95.]\n",
      " [  59.   69.  108. ...,   84.   92.   92.]\n",
      " [  53.   61.   83. ...,   91.   95.   98.]\n",
      " ..., \n",
      " [  73.   82.  104. ...,  102.   98.  104.]\n",
      " [  75.   95.  121. ...,   92.   92.  100.]\n",
      " [  81.  114.  128. ...,   78.   84.   95.]]\n",
      "[[ 14.  28.  50. ...,  67.  68.  69.]\n",
      " [ 19.  39.  52. ...,  69.  69.  68.]\n",
      " [ 23.  52.  53. ...,  69.  68.  65.]\n",
      " ..., \n",
      " [ 31.  39.  68. ...,  88.  84.  84.]\n",
      " [ 28.  34.  43. ...,  88.  89.  91.]\n",
      " [ 24.  29.  36. ...,  81.  84.  88.]]\n",
      "[[  78.   75.   81. ...,  101.  106.  105.]\n",
      " [  88.   82.   75. ...,  101.  103.  104.]\n",
      " [  65.   63.   66. ...,  104.  107.  106.]\n",
      " ..., \n",
      " [  25.   24.   24. ...,   27.   23.   34.]\n",
      " [  22.   22.   23. ...,   43.   24.   17.]\n",
      " [  22.   24.   25. ...,   29.   23.   18.]]\n",
      "[[ 121.  125.  124. ...,  114.  111.  118.]\n",
      " [ 134.  133.  131. ...,  125.  123.  126.]\n",
      " [ 144.  140.  137. ...,  133.  128.  123.]\n",
      " ..., \n",
      " [  52.   57.   62. ...,  140.  184.  137.]\n",
      " [  51.   54.   56. ...,   91.  171.  182.]\n",
      " [  49.   53.   54. ...,   83.  138.  167.]]\n",
      "[[ 111.  180.  193. ...,   40.   37.   40.]\n",
      " [  64.   90.  184. ...,   38.   42.   39.]\n",
      " [  89.   86.  141. ...,   36.   37.   39.]\n",
      " ..., \n",
      " [  60.   45.   46. ...,   39.   47.   44.]\n",
      " [  47.   45.   46. ...,   40.   46.   43.]\n",
      " [  42.   47.   47. ...,   43.   45.   42.]]\n",
      "[[  44.  136.  221. ...,  172.  172.  170.]\n",
      " [  49.  166.  214. ...,  173.  172.  171.]\n",
      " [  61.  199.  211. ...,  174.  173.  170.]\n",
      " ..., \n",
      " [   9.    9.   43. ...,   75.   77.   71.]\n",
      " [  11.    6.    9. ...,   66.   57.   69.]\n",
      " [  11.   10.    7. ...,   58.   62.   68.]]\n"
     ]
    }
   ],
   "source": [
    "# TRAIN IMAGES (200 Total)\n",
    "x_train = []\n",
    "\n",
    "print train[0].shape\n",
    "\n",
    "for i in range(len(train)):\n",
    "    x_train.append(train[i].astype('float32'))\n",
    "\n",
    "    \n",
    "for i in range(len(x_train)):\n",
    "    print x_train[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "validate_path = \"/Users/divyaagarwal/Desktop/Computervision/Assignment2Autoencoders/BSDS500/data/images/val/\"\n",
    "validate_imgs = [f for f in os.listdir(validate_path) if f[-3:] == 'jpg']\n",
    "validate_list = [cv2.imread(os.path.join(validate_path, f), cv2.IMREAD_GRAYSCALE) for f in validate_imgs]\n",
    "validate = np.array([t for t in validate_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# VALIDATE IMAGES (100 Total)\n",
    "x_validate = []\n",
    "\n",
    "for i in range(len(validate)):\n",
    "    x_validate.append(validate[i].astype('float32'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_path = \"/Users/divyaagarwal/Desktop/Computervision/Assignment2Autoencoders/BSDS500/data/images/test/\"\n",
    "test_imgs = [f for f in os.listdir(test_path) if f[-3:] == 'jpg']\n",
    "test_list = [cv2.imread(os.path.join(test_path, f), cv2.IMREAD_GRAYSCALE) for f in test_imgs]\n",
    "test = np.array([t for t in test_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # TEST IMAGES (200 Total)\n",
    "\n",
    "x_test = []\n",
    "\n",
    "for i in range(len(test)):\n",
    "    x_test.append(test[i].astype('float32'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CREATE PATCHES  \n",
    "\n",
    "For each image in the train, validate, and test datasets, create clean and noisy patches using a window size of 8x8 and a step size of 8.  Each noisy patch is created by applying random gaussian noise to its equivalent clean patch.  Set the seed variable to allow comparison between program executions.  \n",
    "\n",
    "Hint for creating patches: http://www.pyimagesearch.com/2015/03/23/sliding-windows-for-object-detection-with-python-and-opencv/  \n",
    "\n",
    "** Output Format: **  \n",
    "* Each pixel must be converted from int to float.  \n",
    "* Each patch must be a flattened numpy array of length 64.\n",
    "* Clean and Noisy sets of Train patches have shape (480000, 64).\n",
    "* Clean and Noisy sets of Validate patches have shape (240000, 64).\n",
    "* Clean and Noisy sets of Test patches have shape (480000, 64)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now creating Clean and Noisy Taining patches of shape (480000, 64)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "windowSize = (8,8)\n",
    "stepSize = 8\n",
    "# numPatches = 30*2400\n",
    "numPatches = 480000\n",
    "numPixels = 64\n",
    "\n",
    "train_patch = np.empty(shape=(numPatches, numPixels))\n",
    "\n",
    "k=0\n",
    "for i in range(len(x_train)):\n",
    "    image = x_train[i]\n",
    "    for y in xrange(0, image.shape[0]-8-1, stepSize):\n",
    "        for x in xrange(0, image.shape[1]-8-1, stepSize):\n",
    "            train_patch[k] = image[y:y + windowSize[1], x:x + windowSize[0]].flatten()\n",
    "            k = k+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(480000, 64)\n"
     ]
    }
   ],
   "source": [
    "print train_patch.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 111.  115.  116.  119.  126.  131.  127.  121.  108.  109.  110.  116.\n",
      "  130.  139.  135.  126.  118.  116.  117.  123.  133.  137.  133.  126.\n",
      "  123.  122.  126.  133.  134.  131.  130.  132.  125.  126.  132.  138.\n",
      "  137.  134.  132.  131.  136.  136.  139.  141.  142.  143.  136.  124.\n",
      "  144.  140.  141.  142.  143.  146.  142.  131.  147.  140.  140.  142.\n",
      "  138.  138.  142.  142.]\n"
     ]
    }
   ],
   "source": [
    "print train_patch[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_noisy_patch = np.empty(shape=(numPatches, numPixels))\n",
    "\n",
    "# Noisy Patches\n",
    "sigma = 25\n",
    "  \n",
    "for i in range(len(train_patch)):\n",
    "    patch = train_patch[i]\n",
    "    noise = np.random.random(patch.shape) * sigma\n",
    "    newPatch = np.add(patch,noise)\n",
    "    train_noisy_patch[i] = np.clip(newPatch, 0, 255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 131.63920714  132.41504264  133.67948457  131.26625144  140.37018471\n",
      "  135.47408713  145.07620543  145.64272548  121.3820875   125.299633\n",
      "  111.85493016  117.96745162  151.61998836  156.95828459  157.40030936\n",
      "  129.50498264  138.08058669  140.33729645  138.6142917   132.51315001\n",
      "  133.49610031  152.4027049   150.36458967  135.43869039  131.66695192\n",
      "  137.84977743  141.63340962  138.97896745  135.65084801  149.95344208\n",
      "  147.70855627  140.49755504  139.25529465  144.21616729  144.48890336\n",
      "  155.28312836  140.510952    155.88989093  139.76908771  140.37330441\n",
      "  144.44581561  157.65962077  156.3865672   162.75398887  156.26158942\n",
      "  143.95375069  152.33854792  130.91858037  155.26951817  147.04163542\n",
      "  148.91061268  165.98627358  144.99882658  152.26958255  142.5032973\n",
      "  136.72919203  155.33356225  164.35548171  160.19363392  146.50334004\n",
      "  153.58780958  138.94426201  152.86946939  143.61908463]\n"
     ]
    }
   ],
   "source": [
    "print train_noisy_patch[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now creating Clean and Noisy Validate patches of shape (480000, 64)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "windowSize = (8,8)\n",
    "stepSize = 8\n",
    "#numPatches = 5*2400\n",
    "numPatches = 240000\n",
    "numPixels = 64\n",
    "\n",
    "validate_patch = np.empty(shape=(numPatches, numPixels))\n",
    "\n",
    "k=0\n",
    "for i in range(len(x_validate)):\n",
    "    image = x_validate[i]\n",
    "    for y in xrange(0, image.shape[0]-8-1, stepSize):\n",
    "        for x in xrange(0, image.shape[1]-8-1, stepSize):\n",
    "            validate_patch[k] = image[y:y + windowSize[1], x:x + windowSize[0]].flatten()\n",
    "            k = k+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(240000, 64)\n"
     ]
    }
   ],
   "source": [
    "print validate_patch.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 200.  255.  255.  254.  253.  255.  250.  255.  253.  254.  252.  255.\n",
      "  255.  252.  255.  254.  255.  255.  254.  255.  255.  255.  254.  255.\n",
      "  254.  255.  253.  255.  253.  254.  255.  253.  255.  252.  255.  255.\n",
      "  255.  254.  252.  187.  255.  255.  255.  249.  255.  254.  211.  133.\n",
      "  253.  255.  255.  255.  253.  228.  172.  146.  255.  255.  253.  254.\n",
      "  225.  184.  187.  184.]\n"
     ]
    }
   ],
   "source": [
    "print validate_patch[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "validate_noisy_patch = np.empty(shape=(numPatches, numPixels))\n",
    "\n",
    "# Noisy Patches\n",
    "sigma = 25\n",
    "  \n",
    "for i in range(len(validate_patch)):\n",
    "    patch = validate_patch[i]\n",
    "    noise = np.random.random(patch.shape) * sigma\n",
    "    newPatch = np.add(patch,noise)\n",
    "    validate_noisy_patch[i] = np.clip(newPatch, 0, 255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 209.04771447  255.          255.          255.          255.          255.\n",
      "  253.59825248  255.          255.          255.          255.          255.\n",
      "  255.          255.          255.          255.          255.          255.\n",
      "  255.          255.          255.          255.          255.          255.\n",
      "  255.          255.          255.          255.          255.          255.\n",
      "  255.          255.          255.          255.          255.          255.\n",
      "  255.          255.          255.          202.95793216  255.          255.\n",
      "  255.          255.          255.          255.          211.55171391\n",
      "  146.8584996   255.          255.          255.          255.          255.\n",
      "  244.4638734   190.17535621  155.42413838  255.          255.          255.\n",
      "  255.          247.8327585   186.79940819  198.46013997  187.56408489]\n"
     ]
    }
   ],
   "source": [
    "print validate_noisy_patch[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now creating Clean and Noisy Test patches of shape shape (480000, 64)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "windowSize = (8,8)\n",
    "stepSize = 8\n",
    "#numPatches = 5*2400\n",
    "numPatches = 480000\n",
    "numPixels = 64\n",
    "\n",
    "test_patch = np.empty(shape=(numPatches, numPixels))\n",
    "\n",
    "k=0\n",
    "for i in range(len(x_test)):\n",
    "    image = x_test[i]\n",
    "    for y in xrange(0, image.shape[0]-8-1, stepSize):\n",
    "        for x in xrange(0, image.shape[1]-8-1, stepSize):\n",
    "            test_patch[k] = image[y:y + windowSize[1], x:x + windowSize[0]].flatten()\n",
    "            k = k+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(480000, 64)\n"
     ]
    }
   ],
   "source": [
    "print test_patch.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  68.   69.   70.   71.   71.   71.   70.   70.   64.   66.   68.   70.\n",
      "   69.   68.   68.   68.   66.   69.   73.   74.   73.   72.   73.   74.\n",
      "   81.   83.   85.   86.   86.   87.   89.   91.  106.  105.  105.  105.\n",
      "  107.  109.  112.  114.  122.  120.  118.  117.  118.  121.  123.  124.\n",
      "  123.  122.  120.  119.  118.  118.  118.  118.  126.  126.  125.  123.\n",
      "  121.  118.  116.  115.]\n"
     ]
    }
   ],
   "source": [
    "print test_patch[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_noisy_patch = np.empty(shape=(numPatches, numPixels))\n",
    "\n",
    "# Noisy Patches\n",
    "sigma = 25\n",
    "  \n",
    "for i in range(len(test_patch)):\n",
    "    patch = test_patch[i]\n",
    "    noise = np.random.random(patch.shape) * sigma\n",
    "    newPatch = np.add(patch,noise)\n",
    "    test_noisy_patch[i] = np.clip(newPatch, 0, 255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(480000, 64)\n"
     ]
    }
   ],
   "source": [
    "print test_noisy_patch.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  69.8825226    88.9454007    71.75974664   95.89443798   73.56097471\n",
      "   77.30254421   94.45172418   88.63319045   77.49728974   85.03947036\n",
      "   90.91698649   81.12876598   75.10840943   73.65491074   70.33335455\n",
      "   81.35020673   82.27549456   93.60554131   88.84674512   94.96799633\n",
      "   76.87117045   76.89172666   90.91571872   86.15355358  100.653349\n",
      "   85.05844962  103.19592927   88.8988022   104.03830643  110.2727726\n",
      "  105.67517021   98.78557608  111.49248707  116.75635095  122.72021695\n",
      "  108.68634919  121.40105804  130.93875668  119.66934557  127.9529882\n",
      "  124.97947127  142.68872884  119.65153861  134.40535979  126.06842533\n",
      "  140.57910437  144.21381653  147.41734104  135.39619264  131.13019447\n",
      "  134.6437368   143.82939165  123.22631089  129.01074183  124.50801891\n",
      "  122.00851116  135.38097067  133.31102122  128.69968748  133.44744292\n",
      "  130.24687199  122.3277565   133.17853354  129.80312488]\n"
     ]
    }
   ],
   "source": [
    "print test_noisy_patch[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "## SINGLE AUTOENCODER MODELS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Autoencoder Model 1 \n",
    "### Train Model 1 - Fit model with random input weights and save output weights  \n",
    "\n",
    "Model takes flattened 8x8 patches, encodes to size 16x16, and decodes to size 8x8.  \n",
    "\n",
    "Parameters:  \n",
    "* verbose = 0 (to prevent keras bug \"model.fit ValueError: I/O operation on closed file\")\n",
    "* optimizer = 'adadelta'\n",
    "* loss = 'mean_squared_error'\n",
    "* encoder activation = 'relu'\n",
    "* decoder activation = 'sigmoid'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this is the size of our encoded representations\n",
    "encoding_dim = 256\n",
    "\n",
    "# this is our input placeholder\n",
    "input_img = Input(shape=(64,))\n",
    "# \"encoded\" is the encoded representation of the input\n",
    "encoded_model1 = Dense(encoding_dim, activation='relu', kernel_initializer='random_normal', \n",
    "                bias_initializer='zeros')(input_img)\n",
    "# \"decoded\" is the lossy reconstruction of the input\n",
    "decoded_model1 = Dense(64, activation='sigmoid', kernel_initializer='random_normal',\n",
    "                bias_initializer='zeros')(encoded_model1)\n",
    "\n",
    "# this model maps an input to its reconstruction\n",
    "autoencoder_model1 = Model(input_img, decoded_model1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder_model1.compile(optimizer='adadelta', loss='mean_squared_error', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_patch = train_patch / 255.\n",
    "validate_patch = validate_patch / 255.\n",
    "test_patch = test_patch / 255.\n",
    "train_noisy_patch = train_noisy_patch / 255.\n",
    "test_noisy_patch = test_noisy_patch / 255.\n",
    "validate_noisy_patch = validate_noisy_patch / 255."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 480000 samples, validate on 240000 samples\n",
      "Epoch 1/35\n",
      "480000/480000 [==============================] - 6s - loss: 0.0490 - acc: 0.0186 - val_loss: 0.0250 - val_acc: 0.0259\n",
      "Epoch 2/35\n",
      "480000/480000 [==============================] - 6s - loss: 0.0118 - acc: 0.0577 - val_loss: 0.0087 - val_acc: 0.0535\n",
      "Epoch 3/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0078 - acc: 0.0597 - val_loss: 0.0078 - val_acc: 0.0675\n",
      "Epoch 4/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0071 - acc: 0.0679 - val_loss: 0.0071 - val_acc: 0.0738\n",
      "Epoch 5/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0064 - acc: 0.0735 - val_loss: 0.0064 - val_acc: 0.0777\n",
      "Epoch 6/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0058 - acc: 0.0787 - val_loss: 0.0059 - val_acc: 0.0832\n",
      "Epoch 7/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0053 - acc: 0.0840 - val_loss: 0.0055 - val_acc: 0.0899\n",
      "Epoch 8/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0050 - acc: 0.0903 - val_loss: 0.0052 - val_acc: 0.0957\n",
      "Epoch 9/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0048 - acc: 0.0962 - val_loss: 0.0050 - val_acc: 0.1005\n",
      "Epoch 10/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0046 - acc: 0.1021 - val_loss: 0.0049 - val_acc: 0.1082\n",
      "Epoch 11/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0045 - acc: 0.1079 - val_loss: 0.0047 - val_acc: 0.1138\n",
      "Epoch 12/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0043 - acc: 0.1137 - val_loss: 0.0046 - val_acc: 0.1194\n",
      "Epoch 13/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0042 - acc: 0.1192 - val_loss: 0.0045 - val_acc: 0.1263\n",
      "Epoch 14/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0041 - acc: 0.1243 - val_loss: 0.0043 - val_acc: 0.1320\n",
      "Epoch 15/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0040 - acc: 0.1296 - val_loss: 0.0042 - val_acc: 0.1371\n",
      "Epoch 16/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0038 - acc: 0.1343 - val_loss: 0.0041 - val_acc: 0.1448\n",
      "Epoch 17/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0037 - acc: 0.1391 - val_loss: 0.0040 - val_acc: 0.1468\n",
      "Epoch 18/35\n",
      "480000/480000 [==============================] - 6s - loss: 0.0036 - acc: 0.1431 - val_loss: 0.0039 - val_acc: 0.1497\n",
      "Epoch 19/35\n",
      "480000/480000 [==============================] - 7s - loss: 0.0035 - acc: 0.1481 - val_loss: 0.0038 - val_acc: 0.1556\n",
      "Epoch 20/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0034 - acc: 0.1522 - val_loss: 0.0037 - val_acc: 0.1600\n",
      "Epoch 21/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0034 - acc: 0.1568 - val_loss: 0.0036 - val_acc: 0.1657\n",
      "Epoch 22/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0033 - acc: 0.1608 - val_loss: 0.0036 - val_acc: 0.1681\n",
      "Epoch 23/35\n",
      "480000/480000 [==============================] - 7s - loss: 0.0032 - acc: 0.1644 - val_loss: 0.0035 - val_acc: 0.1739\n",
      "Epoch 24/35\n",
      "480000/480000 [==============================] - 6s - loss: 0.0031 - acc: 0.1676 - val_loss: 0.0034 - val_acc: 0.1773\n",
      "Epoch 25/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0031 - acc: 0.1711 - val_loss: 0.0034 - val_acc: 0.1808\n",
      "Epoch 26/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0030 - acc: 0.1745 - val_loss: 0.0033 - val_acc: 0.1851\n",
      "Epoch 27/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0030 - acc: 0.1778 - val_loss: 0.0032 - val_acc: 0.1859\n",
      "Epoch 28/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0029 - acc: 0.1812 - val_loss: 0.0032 - val_acc: 0.1906\n",
      "Epoch 29/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0029 - acc: 0.1842 - val_loss: 0.0031 - val_acc: 0.1937\n",
      "Epoch 30/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0028 - acc: 0.1874 - val_loss: 0.0031 - val_acc: 0.1968\n",
      "Epoch 31/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0028 - acc: 0.1909 - val_loss: 0.0030 - val_acc: 0.2004\n",
      "Epoch 32/35\n",
      "480000/480000 [==============================] - 6s - loss: 0.0027 - acc: 0.1940 - val_loss: 0.0030 - val_acc: 0.2031\n",
      "Epoch 33/35\n",
      "480000/480000 [==============================] - 6s - loss: 0.0027 - acc: 0.1971 - val_loss: 0.0029 - val_acc: 0.2059\n",
      "Epoch 34/35\n",
      "480000/480000 [==============================] - 6s - loss: 0.0026 - acc: 0.2001 - val_loss: 0.0029 - val_acc: 0.2079\n",
      "Epoch 35/35\n",
      "480000/480000 [==============================] - 5s - loss: 0.0026 - acc: 0.2033 - val_loss: 0.0028 - val_acc: 0.2132\n"
     ]
    }
   ],
   "source": [
    "history = autoencoder_model1.fit(train_patch, train_patch,\n",
    "                          epochs=35,\n",
    "                          batch_size=1000,\n",
    "                          shuffle=True,\n",
    "                          validation_data=(validate_patch,validate_patch))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "# save the weights\n",
    "weights_model1 =[]\n",
    "weights_model1.append(autoencoder_model1.get_weights())\n",
    "\n",
    "print len(weights_model1[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the Loss from Model 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['acc', 'loss', 'val_acc', 'val_loss']\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x14fcfc810>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x150b55c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "\n",
    "print(history.history.keys())  \n",
    "   \n",
    "# summary for accuracy  \n",
    "   \n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()   \n",
    "      \n",
    "# summary for loss\n",
    "plt.plot(history.history['loss'])  \n",
    "plt.plot(history.history['val_loss'])  \n",
    "plt.title('model loss')  \n",
    "plt.ylabel('loss')  \n",
    "plt.xlabel('epoch')  \n",
    "plt.legend(['train', 'test'], loc='upper left')  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feedforward Model 1   \n",
    "  \n",
    "  \n",
    "**Feed clean and noisy patches through the input and encoding layers of model 1.  ** \n",
    "  \n",
    "**Note:** The weights of the encoding layer must equal the encoding layer weights obtained from the trained model 1.  \n",
    "This model will transform your flattened 8x8 images to flattened 16x16 images, which will be used as input to Autoencoder Model 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(480000, 256)\n",
      "(480000, 256)\n"
     ]
    }
   ],
   "source": [
    "# this model maps an input to its encoded representation\n",
    "encoder_model1 = Model(input_img, encoded_model1)\n",
    "\n",
    "#load weights from previous model\n",
    "encoder_model1.set_weights([weights_model1[0][0], weights_model1[0][1]])\n",
    "\n",
    "#compile the model\n",
    "encoder_model1.compile(optimizer='adadelta', loss='mean_squared_error')\n",
    "\n",
    "# save the O/P 16x16\n",
    "encoder_clean = encoder_model1.predict(train_patch)\n",
    "\n",
    "print encoder_clean.shape\n",
    "\n",
    "# save the O/P 16x16\n",
    "encoder_noisy = encoder_model1.predict(train_noisy_patch)\n",
    "\n",
    "print encoder_noisy.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "## Autoencoder Model 2 \n",
    "#### Train Model 2 - Fit model with random input weights and save output weights  \n",
    "\n",
    "Model takes flattened 16x16 patches, encodes to size 32x32, and decodes to size 16x16.  \n",
    "\n",
    "Parameters:  \n",
    "* verbose = 0 (to prevent keras bug \"model.fit ValueError: I/O operation on closed file\")\n",
    "* optimizer = 'adadelta'\n",
    "* loss = 'mean_squared_error'\n",
    "* encoder activation = 'relu'\n",
    "* decoder activation = 'sigmoid'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this is the size of our encoded representations\n",
    "encoding_dim = 1024\n",
    "\n",
    "# this is our input placeholder\n",
    "input_img = Input(shape=(256,))\n",
    "\n",
    "# \"encoded\" is the encoded representation of the input\n",
    "encoded_model2 = Dense(encoding_dim, activation='relu', kernel_initializer='random_normal', \n",
    "                bias_initializer='zeros')(input_img)\n",
    "\n",
    "# \"decoded\" is the lossy reconstruction of the input\n",
    "decoded_model2 = Dense(256, activation='sigmoid', kernel_initializer='random_normal',\n",
    "                bias_initializer='zeros')(encoded_model2)\n",
    "\n",
    "# this model maps an input to its reconstruction\n",
    "autoencoder_model2 = Model(input_img, decoded_model2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder_model2.compile(optimizer='adadelta', loss='mean_squared_error')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 321599 samples, validate on 158401 samples\n",
      "Epoch 1/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0535 - val_loss: 0.0338\n",
      "Epoch 2/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0386 - val_loss: 0.0288\n",
      "Epoch 3/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0374 - val_loss: 0.0276\n",
      "Epoch 4/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0369 - val_loss: 0.0269\n",
      "Epoch 5/40\n",
      "321599/321599 [==============================] - 32s - loss: 0.0365 - val_loss: 0.0265\n",
      "Epoch 6/40\n",
      "321599/321599 [==============================] - 38s - loss: 0.0362 - val_loss: 0.0261\n",
      "Epoch 7/40\n",
      "321599/321599 [==============================] - 38s - loss: 0.0359 - val_loss: 0.0258\n",
      "Epoch 8/40\n",
      "321599/321599 [==============================] - 34s - loss: 0.0357 - val_loss: 0.0256\n",
      "Epoch 9/40\n",
      "321599/321599 [==============================] - 33s - loss: 0.0355 - val_loss: 0.0254\n",
      "Epoch 10/40\n",
      "321599/321599 [==============================] - 36s - loss: 0.0354 - val_loss: 0.0253\n",
      "Epoch 11/40\n",
      "321599/321599 [==============================] - 38s - loss: 0.0353 - val_loss: 0.0251\n",
      "Epoch 12/40\n",
      "321599/321599 [==============================] - 36s - loss: 0.0352 - val_loss: 0.0250\n",
      "Epoch 13/40\n",
      "321599/321599 [==============================] - 34s - loss: 0.0351 - val_loss: 0.0249\n",
      "Epoch 14/40\n",
      "321599/321599 [==============================] - 34s - loss: 0.0350 - val_loss: 0.0248\n",
      "Epoch 15/40\n",
      "321599/321599 [==============================] - 34s - loss: 0.0350 - val_loss: 0.0247\n",
      "Epoch 16/40\n",
      "321599/321599 [==============================] - 35s - loss: 0.0349 - val_loss: 0.0247\n",
      "Epoch 17/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0348 - val_loss: 0.0246\n",
      "Epoch 18/40\n",
      "321599/321599 [==============================] - 35s - loss: 0.0348 - val_loss: 0.0245\n",
      "Epoch 19/40\n",
      "321599/321599 [==============================] - 32s - loss: 0.0347 - val_loss: 0.0245\n",
      "Epoch 20/40\n",
      "321599/321599 [==============================] - 33s - loss: 0.0347 - val_loss: 0.0244\n",
      "Epoch 21/40\n",
      "321599/321599 [==============================] - 33s - loss: 0.0346 - val_loss: 0.0244\n",
      "Epoch 22/40\n",
      "321599/321599 [==============================] - 39s - loss: 0.0346 - val_loss: 0.0243\n",
      "Epoch 23/40\n",
      "321599/321599 [==============================] - 39s - loss: 0.0346 - val_loss: 0.0243\n",
      "Epoch 24/40\n",
      "321599/321599 [==============================] - 36s - loss: 0.0345 - val_loss: 0.0242\n",
      "Epoch 25/40\n",
      "321599/321599 [==============================] - 35s - loss: 0.0345 - val_loss: 0.0242\n",
      "Epoch 26/40\n",
      "321599/321599 [==============================] - 33s - loss: 0.0345 - val_loss: 0.0242\n",
      "Epoch 27/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0345 - val_loss: 0.0241\n",
      "Epoch 28/40\n",
      "321599/321599 [==============================] - 32s - loss: 0.0344 - val_loss: 0.0241\n",
      "Epoch 29/40\n",
      "321599/321599 [==============================] - 30s - loss: 0.0344 - val_loss: 0.0241\n",
      "Epoch 30/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0344 - val_loss: 0.0241\n",
      "Epoch 31/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0344 - val_loss: 0.0240\n",
      "Epoch 32/40\n",
      "321599/321599 [==============================] - 41s - loss: 0.0343 - val_loss: 0.0240\n",
      "Epoch 33/40\n",
      "321599/321599 [==============================] - 32s - loss: 0.0343 - val_loss: 0.0240\n",
      "Epoch 34/40\n",
      "321599/321599 [==============================] - 31s - loss: 0.0343 - val_loss: 0.0240\n",
      "Epoch 35/40\n",
      "321599/321599 [==============================] - 35s - loss: 0.0343 - val_loss: 0.0239\n",
      "Epoch 36/40\n",
      "321599/321599 [==============================] - 35s - loss: 0.0343 - val_loss: 0.0239\n",
      "Epoch 37/40\n",
      "321599/321599 [==============================] - 33s - loss: 0.0342 - val_loss: 0.0239\n",
      "Epoch 38/40\n",
      "321599/321599 [==============================] - 33s - loss: 0.0342 - val_loss: 0.0239\n",
      "Epoch 39/40\n",
      "321599/321599 [==============================] - 34s - loss: 0.0342 - val_loss: 0.0239\n",
      "Epoch 40/40\n",
      "321599/321599 [==============================] - 33s - loss: 0.0342 - val_loss: 0.0239\n"
     ]
    }
   ],
   "source": [
    "history = autoencoder_model2.fit(encoder_clean, \n",
    "                                 encoder_clean,\n",
    "                                 batch_size=1000,\n",
    "                                 epochs=40,\n",
    "                                validation_split=0.33)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder_model2.save_weights(\"/Users/divyaagarwal/Desktop/Computervision/Assignment2Autoencoders/model2.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "# save the weights\n",
    "weights_model2 =[]\n",
    "weights_model2.append(autoencoder_model2.get_weights())\n",
    "\n",
    "print len(weights_model2[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['loss', 'val_loss']\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEWCAYAAABMoxE0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XmYXHWd7/H3t05VdfXe6U5nIQsJgsgmSQgobhfGAQEX\nXFAZxWFG5kZnhuc616sj3Dt6hTszF+beOziOjiyC4i6DMkZBQcSIM8qShCAJBBNCIJ1A9t6X2r73\nj3O6qXR6qV6qq5J8Xs9Tz9l+59S3Dk/nw9l+x9wdERGRyYqVuwARETmyKUhERGRKFCQiIjIlChIR\nEZkSBYmIiEyJgkRERKZEQSJSQmb2dTP72yLbbjezP5zqdkRmmoJERESmREEiIiJToiCRY150SunT\nZvY7M+sxs9vNbK6Z/dTMuszsQTObVdD+XWa2yczazWyNmZ1SsGy5ma2P1vs+kBr2Xe8wsw3Rur8x\ns9dOsub/bGZbzeyAma02s+Oi+WZmN5nZHjPriH7T6dGyS8zs6ai2nWb2qUntMJFhFCQiofcBFwCv\nBt4J/BT478Bswr+T/wJgZq8Gvgv8FdAK3Af82MySZpYE/g34JtAM/Gu0XaJ1VwB3AB8DWoBbgNVm\nVjWRQs3sD4D/DXwAmA+8AHwvWnwh8JbodzQBHwT2R8tuBz7m7vXA6cBDE/lekdEoSERC/+zuu919\nJ/Br4FF3f8LdB4B7gOVRuw8C97r7z909A/xfoBp4A/B6IAF8wd0z7n438HjBd/xn4BZ3f9Tdc+5+\nJzAQrTcRHwbucPf1UX3XAuea2RIgA9QDrwHM3Z9x95ei9TLAqWbW4O4H3X39BL9XZEQKEpHQ7oLx\nvhGm66Lx4wiPAABw9zywA1gQLdvph/aE+kLB+PHAf4tOa7WbWTuwKFpvIobX0E141LHA3R8CvgR8\nGdhtZreaWUPU9H3AJcALZvYrMzt3gt8rMiIFicjE7CIMBCC8JkEYBjuBl4AF0bxBiwvGdwB/5+5N\nBZ8ad//uFGuoJTxVthPA3b/o7mcBpxGe4vp0NP9xd78UmEN4Cu6uCX6vyIgUJCITcxfwdjN7q5kl\ngP9GeHrqN8BvgSzwX8wsbmbvBc4pWPc24ONm9rroonitmb3dzOonWMN3gD81s2XR9ZW/JzwVt93M\nzo62nwB6gH4gF13D+bCZNUan5DqB3BT2g8gQBYnIBLj7s8AVwD8D+wgvzL/T3dPungbeC/wJcJDw\nesoPC9ZdS3id5EvR8q1R24nW8Avgs8APCI+CXgVcHi1uIAysg4Snv/YTXscB+Aiw3cw6gY9Hv0Nk\nykwvthIRkanQEYmIiExJSYPEzC4ys2ejB6euGWF5lZl9P1r+aHT7Ima2xMz6oge3NpjZzQXrrIm2\nObhsTil/g4iIjC1eqg2bWUB4C+IFQBvwuJmtdvenC5pdBRx09xPN7HLgRsLzygDPufuyUTb/4eh8\ns4iIlFkpj0jOAba6+7boIuT3gEuHtbkUuDMavxt467BbJ0VEpMKV7IiE8AGtHQXTbcDrRmvj7lkz\n6yC8Hx5gqZk9QXib4t+4+68L1vuameUI71r5Wx/njoHZs2f7kiVLJv1DRESORevWrdvn7q3jtStl\nkIx0ZDH8H/zR2rwELHb3/WZ2FvBvZnaau3cSntbaGd17/wPCWxq/cdiXm60CVgEsXryYtWt1JkxE\nZCLM7IXxW5X21FYb4RO/gxYSPpE7YhsziwONwAF3H3D3/QDuvg54jvAJXaK+kHD3LsIHs85hBO5+\nq7uvdPeVra3jBqqIiExSKYPkceAkM1sa9Yp6ObB6WJvVwJXR+GXAQ+7uZtYaXazHzE4ATgK2RU8L\nz47mJ4B3ABtL+BtERGQcJTu1FV3zuBq4HwgIeyvdZGbXA2vdfTVht9bfNLOtwAFeeTr3LcD1ZpYl\n7Mbh4+5+IOpT6P4oRALgQcKneEVEpEyOiSfbV65c6cOvkWQyGdra2ujv7y9TVTMjlUqxcOFCEolE\nuUsRkSOMma1z95XjtSvlxfaK1tbWRn19PUuWLOFovePY3dm/fz9tbW0sXbq03OWIyFHqmO0ipb+/\nn5aWlqM2RADMjJaWlqP+qEtEyuuYDRLgqA6RQcfCbxSR8jqmg2Q83Qdeoqd9b7nLEBGpaAqSMST6\nD2D9B0uy7fb2dv7lX/5lwutdcskltLe3l6AiEZHJUZCMIW8B5qV5idxoQZLLjf199913H01NTSWp\nSURkMo7Zu7aKkbc48XxpLlRfc801PPfccyxbtoxEIkFdXR3z589nw4YNPP3007z73e9mx44d9Pf3\n84lPfIJVq1YBsGTJEtauXUt3dzcXX3wxb3rTm/jNb37DggUL+NGPfkR1dXVJ6hURGY2CBLjux5t4\nelfnYfNzmX5insWSXRPe5qnHNfA/33naqMtvuOEGNm7cyIYNG1izZg1vf/vb2bhx49BtunfccQfN\nzc309fVx9tln8773vY+WlpZDtrFlyxa++93vctttt/GBD3yAH/zgB1xxhd6eKiIzS0EyJhuxV8lS\nOOeccw551uOLX/wi99xzDwA7duxgy5YthwXJ0qVLWbYsfGXLWWedxfbt22eoWhGRVyhIYNQjh+4D\nL1HX/zLZ1tOIJ5IlraG2tnZofM2aNTz44IP89re/paamhvPOO2/EZ0GqqqqGxoMgoK+vr6Q1ioiM\nRBfbx2CxMGdzuey0b7u+vp6urpFPmXV0dDBr1ixqamrYvHkzjzzyyLR/v4jIdNERyRgsCPunymcz\n077tlpYW3vjGN3L66adTXV3N3Llzh5ZddNFF3Hzzzbz2ta/l5JNP5vWvf/20f7+IyHQ5ZjttfOaZ\nZzjllFPGXK+/t5tU+xZ6ahdT29gyZttKVsxvFREZrthOG3VqawxBPDpgy03/EYmIyNFCQTKGIDq1\n5fnpv0YiInK0UJCMIRYE5NwgX5qn20VEjgYKknHkLMBcRyQiIqNRkIwjT4DpiEREZFQKknHkLSCm\nIxIRkVEpSMbhFifG9B+RTLYbeYAvfOEL9Pb2TnNFIiKToyAZh8cCAs9P+3YVJCJytNCT7eOJxQks\nTz6fJxabvtwt7Eb+ggsuYM6cOdx1110MDAzwnve8h+uuu46enh4+8IEP0NbWRi6X47Of/Sy7d+9m\n165dnH/++cyePZtf/vKX01aTiMhkKEgAfnoNvPzUiIuqs2nID0CiFmwCQTLvDLj4hlEXF3Yj/8AD\nD3D33Xfz2GOP4e68613v4uGHH2bv3r0cd9xx3HvvvUDYB1djYyP/+I//yC9/+Utmz549oZ8pIlIK\nOrU1Hos6ki9hVzIPPPAADzzwAMuXL2fFihVs3ryZLVu2cMYZZ/Dggw/ymc98hl//+tc0NjaWrAYR\nkcnSEQmMeeSQ7u6gunMbA/VLqa4vzStu3Z1rr72Wj33sY4ctW7duHffddx/XXnstF154IZ/73OdK\nUoOIyGSV9IjEzC4ys2fNbKuZXTPC8ioz+360/FEzWxLNX2JmfWa2IfrcXLDOWWb2VLTOF82spO+e\nigVh1ubz09vfVmE38m9729u444476O7uBmDnzp3s2bOHXbt2UVNTwxVXXMGnPvUp1q9ff9i6IiLl\nVrIjEjMLgC8DFwBtwONmttrdny5odhVw0N1PNLPLgRuBD0bLnnP3ZSNs+ivAKuAR4D7gIuCnJfoZ\nxOJRf1vT/E6Swm7kL774Yj70oQ9x7rnnAlBXV8e3vvUttm7dyqc//WlisRiJRIKvfOUrAKxatYqL\nL76Y+fPn62K7iJRdybqRN7Nzgc+7+9ui6WsB3P1/F7S5P2rzWzOLAy8DrcDxwE/c/fRh25wP/NLd\nXxNN/xFwnrsffk6owGS7kQfCu7VefpLuZCt1sxeO274SqRt5EZmMSuhGfgGwo2C6LZo3Yht3zwId\nwOCLP5aa2RNm9isze3NB+7ZxtgmAma0ys7Vmtnbv3r2T/hGxWIwcMVAPwCIiIyplkIx07WL44c9o\nbV4CFrv7cuCTwHfMrKHIbYYz3W9195XuvrK1tXUCZR8uR4ApSERERlTKIGkDFhVMLwR2jdYmOrXV\nCBxw9wF33w/g7uuA54BXR+0Lzy+NtM2iFXtaL0+A+ZHZceOx8AZMESmvUgbJ48BJZrbUzJLA5cDq\nYW1WA1dG45cBD7m7m1lrdLEeMzsBOAnY5u4vAV1m9vrobq0/Bn40meJSqRT79+8v6h/asOPGIy9I\n3J39+/eTSqXKXYqIHMVKdteWu2fN7GrgfiAA7nD3TWZ2PbDW3VcDtwPfNLOtwAHCsAF4C3C9mWWB\nHPBxdz8QLftz4OtANeHdWpO6Y2vhwoW0tbVRzPWTgc69xPNpgo6S3mlcEqlUioULj8ybBETkyFCy\nu7YqyUh3bU3EIzf/BWe+9K9UXzf5i/YiIkeaSrhr6+hR00K1penr0UOAIiLDKUiKENSFnSN27H+5\nzJWIiFQeBUkREvXh7cPdB3eXuRIRkcqjIClCqjEMkl4FiYjIYRQkRaidNQeAdKcutouIDKcgKUJD\n8zwAst37ylyJiEjlUZAUob5pNjk3vHd/uUsREak4CpIixIKADqsn1ndg/MYiIscYBUmRumKNJAYU\nJCIiwylIitQTNFKVbi93GSIiFUdBUqSBZBM12Y5ylyEiUnEUJEVKVzVTn1eQiIgMpyApUr66mUbv\nwvP5cpciIlJRFCRFspoWEpajq/NguUsREakoCpIiDXbc2HVAHTeKiBRSkBQp2RD2t6UgERE5lIKk\nSNWNYX9b/R3qb0tEpJCCpEh1s+YC6rhRRGQ4BUmRGlrCIMn3qONGEZFCCpIi1dY1kvY43qNuUkRE\nCilIimSxGO3WQNCvHoBFRAopSCagO9ZAYkDPkYiIFFKQTEBvoolURh03iogUUpBMwECiidqc+tsS\nESlU0iAxs4vM7Fkz22pm14ywvMrMvh8tf9TMlgxbvtjMus3sUwXztpvZU2a2wczWlrL+4bKpZurz\nnTP5lSIiFa9kQWJmAfBl4GLgVOCPzOzUYc2uAg66+4nATcCNw5bfBPx0hM2f7+7L3H3lNJc9pnx1\nC43eTS6bncmvFRGpaKU8IjkH2Oru29w9DXwPuHRYm0uBO6Pxu4G3mpkBmNm7gW3AphLWOCGx2hZi\n5nQe1EOJIiKDShkkC4AdBdNt0bwR27h7FugAWsysFvgMcN0I23XgATNbZ2arRvtyM1tlZmvNbO3e\nvdPzD39QH3bc2Ln/pWnZnojI0aCUQWIjzPMi21wH3OTu3SMsf6O7ryA8ZfaXZvaWkb7c3W9195Xu\nvrK1tXUidY+qqj7sb6unfc+0bE9E5GgQL+G224BFBdMLgV2jtGkzszjQCBwAXgdcZmb/ADQBeTPr\nd/cvufsuAHffY2b3EJ5Ce7iEv2NITVMYSOq4UUTkFaU8InkcOMnMlppZErgcWD2szWrgymj8MuAh\nD73Z3Ze4+xLgC8Dfu/uXzKzWzOoBotNfFwIbS/gbDlHXHPa3le1SkIiIDCrZEYm7Z83sauB+IADu\ncPdNZnY9sNbdVwO3A980s62ERyKXj7PZucA90fX4OPAdd/9ZqX7DcI1RkOTUcaOIyJBSntrC3e8D\n7hs273MF4/3A+8fZxucLxrcBZ05vlcVL1dTR61VYrzpuFBEZpCfbJ6jDGgj6FSQiIoMUJBPUHTSS\nTKvjRhGRQQqSCepLNFGtjhtFRIYoSCYonVTHjSIihRQkE5RNtdCgjhtFRIYoSCbIa5qptz7SA/3l\nLkVEpCIoSCYoVhv2t9Wx/+UyVyIiUhkUJBOUiDpu7Dqwu8yViIhUBgXJBFU1hB039rYrSEREQEEy\nYbWzwiAZ6FR/WyIioCCZsLpZgx03qr8tERFQkExYY3N4RJLv2V/mSkREKoOCZIISySo6qSXWpyAR\nEQEFyaR0WgNBv/rbEhEBBcmk9ASNVKnjRhERQEEyKX2JJqqz6m9LRAQUJJOSqZpFnTpuFBEBFCST\nkks10+jquFFEBBQkk1PTQrWl6evpKnclIiJlpyCZhKAu7G+rfd+uMlciIlJ+CpJJSNS3AtB9cE+Z\nKxERKT8FySSkGsMg6WtXkIiIKEgmYbDjxrQ6bhQRUZBMRkPzPACy3eq4UUSkpEFiZheZ2bNmttXM\nrhlheZWZfT9a/qiZLRm2fLGZdZvZp4rd5kyob5pNzg3vVX9bIiIlCxIzC4AvAxcDpwJ/ZGanDmt2\nFXDQ3U8EbgJuHLb8JuCnE9xmycWCgA6rJ9Z3YKa/WkSk4pTyiOQcYKu7b3P3NPA94NJhbS4F7ozG\n7wbeamYGYGbvBrYBmya4zRnRFWskMaAgEREpZZAsAHYUTLdF80Zs4+5ZoANoMbNa4DPAdZPYJgBm\ntsrM1prZ2r17p/+ieNhxY/u0b1dE5EhTyiCxEeZ5kW2uA25y9+5JbDOc6X6ru69095Wtra3jFjtR\nA8kmatRxo4gI8RJuuw1YVDC9EBj+KPhgmzYziwONwAHgdcBlZvYPQBOQN7N+YF0R25wRmapZ1Pds\nLMdXi4hUlKKOSMzsE2bWYKHbzWy9mV04zmqPAyeZ2VIzSwKXA6uHtVkNXBmNXwY85KE3u/sSd18C\nfAH4e3f/UpHbnBFhx41deD5fjq8XEakYxZ7a+qi7dwIXAq3AnwI3jLVCdM3jauB+4BngLnffZGbX\nm9m7oma3E14T2Qp8Ehjzdt7Rtlnkb5hWVjubhOXo7NAFdxE5thV7amvw2sQlwNfc/cnBu6vG4u73\nAfcNm/e5gvF+4P3jbOPz422zHAY7buza/zKNs2aXuRoRkfIp9ohknZk9QBgk95tZPXBMn9NJNkQd\nN7bvLnMlIiLlVewRyVXAMmCbu/eaWTPh6a1jVnVj2N9Wf4f62xKRY1uxRyTnAs+6e7uZXQH8DeEz\nH8esullzAXXcKCJSbJB8Beg1szOBvwZeAL5RsqqOAA0tYZDw4iO6c0tEjmnFBknW3Z2wO5J/cvd/\nAupLV1blq2uYxaOz38s5B3/CI7d/UmEiIsesYoOky8yuBT4C3Bt1npgoXVlHhrP//Ks81vxOzt35\nNYWJiByzig2SDwIDhM+TvEzYv9X/KVlVR4hYELDyL+9UmIjIMa2oIInC49tAo5m9A+h392P6Gskg\nhYmIHOuK7SLlA8BjhA8PfgB41MwuK2VhR5KhMJn1DoWJiBxzij219T+As939Snf/Y8L3gny2dGUd\neWJBwMqrv6EwEZFjTrFBEnP3PQXT+yew7jHj8DD5rwoTETnqFRsGPzOz+83sT8zsT4B7qYD+rirR\noWHydZ77u5Wsu+9r5LLZcpcmIlISFj4eUkRDs/cBbyTswPFhd7+nlIVNp5UrV/ratWtn9DvzuRxr\n/+2fmb/xFhb5LtpsPrtOW8WZ7/g4VamaGa1FRGQyzGydu68ct12xQXIkK0eQDMplszz54Leof/yf\nOSm3lb3M4rkTPsJpl/5X6huby1KTiEgxpiVIzKyLkV9la4C7e8PkS5w55QySQZ7Ps+k/foz/+02c\nMfAEndSwaf57mf+WP2XJKeP+dxIRmXE6IilQCUFSaMuGX9P14P/hzK6HCcx5PnY8Ly++hEVvuoKF\nJ55e7vJERAAFySEqLUgG7Xv5RZ5b820anvsxp2TCFz1uCU5k/9J3sOQtVzBv8UllrlBEjmUKkgKV\nGiSFXt6xle2/+hbN2+/l1dnfA/D7+KvZP+9NNJ52ISeuOJ9kVarMVYrIsURBUuBICJJCO7dtYsfD\n36ap7SFOzDxL3PL0ehVbas6kb9FbmLf8Yo4/eQUW06M8IlI6CpICR1qQFOps389zj/2U9O9/wXH7\nH2GR7wJgD83sqF9GZv4Kmk58PUtOP5dUTV2ZqxWRo4mCpMCRHCTDvfTCs+xY+1OC7WtY0PUU89gH\nQMYDtseXcqDpdGKLzmbOa97AwhNfSxAv9m3KIiKHUpAUOJqCZLh9u15gx8Zf07/9Mer3P8mS/mep\nsz4A+jxJW3wx7XUnkmt9DTULzmDuScuZc9xSnRYTkXEpSAoczUEyXD6XY8fvN7B782/Iv7yJ2vZn\nmTfwPK0cHGrTSQ07E0voql1CvmkpiTmvonHBycw5/hQamlrKWL2IVJJig0TnPY4ysSDg+FPO4vhT\nzjpkfvu+l9m15Qm6Xvwd7Hma+s6tLG3/La3t98H2V9odoIG98ePoqllIpn4hsaZFpFoW0zBvKbMX\nvEpP44vIYRQkx4im2fNomn0xnHvxIfN7uzt4eftmOnZuZmD3Vqx9O7U9L7Kg80laOx4ivvPQ3os7\nqWF/bA6dyVYGUq3kaucSa5hHsmk+1c0LaGhdRPPchaSqa2fy54lIGZU0SMzsIuCfgAD4qrvfMGx5\nFfAN4CzCruk/6O7bzewc4NbBZsDnBzuJNLPtQBeQA7LFHHbJ6GrqGjnh9NfB6a87bFkum2XP7h0c\n2PUcPXu2kzm4A+toI9mzi7qBPczvf47mg+3E7fCu8juppcMa6Y430Z9sJp1qwatnY3WtxOtbqWpo\npbqxldpZc2hsnkt1bf1M/FwRKYGSBYmZBcCXgQuANuBxM1vt7k8XNLsKOOjuJ5rZ5cCNhO+H3wis\ndPesmc0HnjSzH7v7YF/s57v7vlLVLqEgHmfOgqXMWbB01Da5bJZ9+16iffeL9OzfycDBXeQ6XyLW\ns5d4/35S6YPM6nuRhp7f0eRdxGzka3L9nqDT6umONdAXb2Qg0UA22UC+qglSTVhNE0HtLJK1zaQa\nWqiun0V1fTN1jc06+hEps1IekZwDbHX3bQBm9j3gUqAwSC4FPh+N3w18yczM3XsL2qQYueNIqQBB\nPM7seYuYPW/RuG1z2SwHDuymY98uetv3ku7aS6ZrP7me/VjfQWL9B0mk20ll2mnu205tTzf13k3K\nMmNuN+1xuqyWXqulP6hlIKglE68jG68jn6wjn6zHquqxVD1BqoF4dQPxmnqqahpJ1jRQXddIdV0j\nNbUNul1aZBJK+VezANhRMN0GDD9/MtQmOvroAFqAfWb2OuAO4HjgIwVHIw48YGYO3OLutzICM1sF\nrAJYvHjx9PwimZIgHqd5zgKa5yyY0Hr9fT10H9xHT8c++jr30999gGxPO7m+DryvAx/oIJbuIp7u\nJJHpJpntpjZzkOp8LzX0Uuu9BKMcCQ3X61X0WYp+S5G2agZi1WSCFNmghly8mlyiFo/X4IlqSNRg\nyRpiyVpiqVriyVriqfCTSNWRTFWTrK4jVV1HVU0dVVXVuu1ajkqlDBIbYd7wv+ZR27j7o8BpZnYK\ncKeZ/dTd+4E3uvsuM5sD/NzMNrv7w4dtJAyYWyG8/XcqP0TKK1VdS6q6ltnHHT+p9T2fp7e3i97O\ndnq7DzLQ00m6t4tMXyfZ/i5yfV34QBee7sEGurBsH0GmhyDXRzzbSyLfT23mIFXeR5UPUO39VDMw\n6mm60eTd6CfBgCVJkyRtVWSsikwsSSZWRS6WIhdUkYtVkQ+q8HgKD6rweBXEU1gihcVTWLwKS6SI\nJaoJElUEyRRBMhyPJ1PEkykSVTUkqlIkkikSVSmSVdXE4wkFmZREKYOkDSg837EQ2DVKmzYziwON\nwIHCBu7+jJn1AKcDa93DPkLcfY+Z3UN4Cu2wIBEZZLEYNXWN1NQ1Eh7gTp3n8/QP9NHf00V/XzcD\nvd2k+7rI9HWTHegll+4jN9BDPt1LPt2LZ/oh04tl+rBsH5btJ5YbIMj1E+QHiOcHSGU7SKTTxD1N\n0gdIkiHpaapIj3hDw0Tl3MgQJ20JMoSfrCXIWpysJclZglwsQc4S5GOFnyQeS+DB4DABQXLoY0EC\niyexIAlBglg0HouH47F4FbF4giCRJIgnw/CLJwjiSeLJKuLxZLgskSSRSBJPJBV6R5hSBsnjwElm\nthTYCVwOfGhYm9XAlcBvgcuAh9zdo3V2RKe7jgdOBrabWS0Qc/euaPxC4PoS/gaREVksNnSkNBOy\nmTT9fT1kBvpJD/SS6e8jm+knM9BHbiAcz6X7yWUGyGf6yGcG8Gz4oWBouTTk0lg+TSyXxnJpYvkM\nsXyaIJ8m5hkSuT6CbCdxzxD3DAFZ4p4lQSYaZkmSnfAR2URlPCBL9LE4ubASchaQszg54uSj8byF\n890C8pYgH4tH43E8FsctjscCPJYAC8IwtACPxSFIQCwOsQCLpi0Wh1gcC+JhUA6Nx7FYnFg8jsUS\nxKLlQbQsFk8QCxIE8TixIE4QT0TDJLEgIAgSxOIJ4vE4QbQ8COLEgqCk+7LUShYkUQhcDdxPePvv\nHe6+ycyuJzyyWA3cDnzTzLYSHolcHq3+JuAaM8sAeeAv3H2fmZ0A3GNmg7V/x91/VqrfIFIp4okk\ndYlkucs4RC6bJZPuJ50eCAMtmyGbSZPL9Ifj6YEw2HIZcul+8tkM+VwGz6XJZdN4NgO5DPlsGs9l\nIJ/Bc1nIpSGfhVwGy2chHw5t2DDmWcxzxPJZYp4h5rkoDHvDcY9iyLMEnidGjoAcccLpcDxHwnLl\n3pXk3cgSY6hKG6w2IE+MPAF5i5ZbgBcM8xaQJ8AtRt5iUYCGy9wCTvnEPVSlakpav7pIEZFjmufz\n5PN5stk02UyabDZLPpshlxsMxgz5fHYoCHPZLPlclnwuEw6zaTyfI5/L4rns0NCHgjGD53N4PgtD\nw7AN+Sx4Phzmc2FwRtPmuaGheX5oWczDoXmO2OAyzxLzPMYr82PkMc+z+K9/M+l3GamLlGmwaV/4\n1sLTZp9W5kpEpFQsFiOIxQji8ZL/n/vRSlezxnDNr6/h5idvLncZIiIVTUEyhmVzlrFh7wbyPvU7\nZkREjlYKkjGsmLOC9oF2tndsL3cpIiIVS0EyhmVzlgHwxJ4nylyJiEjlUpCMYUnDEmZVzVKQiIiM\nQUEyBjPjzDlnsmHvhnKXIiJSsRQk41gxZwUvdL7Avj71Wi8iMhIFyTiWz1kOwJN7nixzJSIilUlB\nMo5TW04lGUvqOomIyCgUJONIBklOm30aT+xVkIiIjERBUoTlc5bz9P6n6c/2l7sUEZGKoyApwvI5\ny8nms2zct7HcpYiIVBwFSRGWtYYPJuo2YBGRwylIitCUamJp41JdcBcRGYGCpEgr5qzgiT1PqANH\nEZFhFCRprT6nAAASXUlEQVRFWjZnGV3pLra1byt3KSIiFUVBUqTBBxN1G7CIyKEUJEVaXL+Y5lQz\nT+xWkIiIFFKQFMnMWD5nuS64i4gMoyCZgOVzltPW3aYOHEVECihIJkAvuhIROZyCZAJObT6VqqCK\n9bvXl7sUEZGKoSCZgESQ4PTZp7Nhj55wFxEZVNIgMbOLzOxZM9tqZteMsLzKzL4fLX/UzJZE888x\nsw3R50kze0+x2yy15XOWs/nAZvqyfTP91SIiFalkQWJmAfBl4GLgVOCPzOzUYc2uAg66+4nATcCN\n0fyNwEp3XwZcBNxiZvEit1lSy+csJ+vqwFFEZFApj0jOAba6+zZ3TwPfAy4d1uZS4M5o/G7grWZm\n7t7r7tlofgrwCWyzpM5sPRNA10lERCKlDJIFwI6C6bZo3ohtouDoAFoAzOx1ZrYJeAr4eLS8mG0S\nrb/KzNaa2dq9e/dOw88JNVY1cmLTiXrCXUQkUsogsRHmebFt3P1Rdz8NOBu41sxSRW6TaP1b3X2l\nu69sbW2dQNnjWzZnGb/b8zt14CgiQmmDpA1YVDC9ENg1WhsziwONwIHCBu7+DNADnF7kNktu+Zzl\ndGW62Nq+daa/WkSk4pQySB4HTjKzpWaWBC4HVg9rsxq4Mhq/DHjI3T1aJw5gZscDJwPbi9xmyQ11\n4Kh+t0REShck0TWNq4H7gWeAu9x9k5ldb2bviprdDrSY2Vbgk8Dg7bxvAp40sw3APcBfuPu+0bZZ\nqt8wmoV1C5ldPVvXSUREgHgpN+7u9wH3DZv3uYLxfuD9I6z3TeCbxW5zpg124KgHE0VE9GT7pC1r\nXcbO7p3s7tld7lJERMpKQTJJK+auAGDt7rVlrkREpLwUJJN0cvPJLKhbwI2P3ciWg1vKXY6ISNko\nSCYpEUtwywW3kIgl+LMH/ozn2p8rd0kiImWhIJmC4xuO56tv+yoxi3HV/VfxfMfz5S5JRGTGKUim\naGnjUm6/8HYc56r7r+KFzhfKXZKIyIxSkEyDE5pO4KsXfpVsPstH7/8oOzp3jL+SiMhRQkEyTU6a\ndRK3XXgbA7kBrnrgKnZ27yx3SSIiM0JBMo1Obj6Z2y64jZ5MD1fdfxUvdb9U7pJEREpOQTLNTmk5\nhVsvvJXOgU4+ev9H2bRvxntwERGZUQqSEjit5TRuueAWerO9XH7v5Vzz62t0dCIiRy0FSYmc0XoG\n977nXv7sjD/j59t/zjv/7Z18cf0X6cn0lLs0EZFppSApobpkHZ9Y8Ql+8p6f8IfH/yG3PXUbl/zw\nEu569i6y+ez4GxAROQIoSGbA/Lr53PDmG/ju27/LkoYl/K9H/hfv//H7ebjtYb1lUUSOeOY+4ptq\njyorV670tWsro3NFd+cXL/6Cm9bdxItdL7K4fjHvPem9XHripcyunl3u8kREhpjZOndfOW47BUl5\nZHIZfrb9Z/xgyw9Yt3sdcYtz/uLzueyky3j9ca8nZjpYFJHyUpAUqMQgKbStYxs//P0P+dFzP6J9\noJ0FdQt430nv412vehdza+eWuzwROUYpSApUepAMSufS/OLFX3D37+/msZcfA+D0ltP5T4v+E+cv\nOp9Xz3o1ZlbmKkXkWKEgKXCkBEmhFzpf4IHtD7Bmxxqe2vcUjjOvdh7nLTyP8xadx9nzziYZJMtd\npogcxRQkBY7EICm0r28fD7c9zJoda3jkpUfoy/ZRE6/h7Hlns2LuClbMWcFpLaeRCBLlLlVEjiIK\nkgJHepAU6s/289jLj7Fmxxoef/lxtnduByAVpDij9QxWzFnBirkrWNa6jJpETXmLFZEjmoKkwNEU\nJMPt69vHE3ueYP3u9azfs57NBzaT9zyBBZzQdAKnNJ/Ca5pfMzSsS9aVu2QROUIoSAoczUEyXE+m\nhyf3PMn6Pet5ev/TbD6wmb19e4eWL6pfNBQsr2p6FUsbl7KofhHxWLyMVYtIJSo2SPSvx1GmNlHL\nGxa8gTcseMPQvH19+3hm/zNsPrCZZw48wzP7n+HnL/x8aHk8Fmdx/WJOaDyBpY1Lhz6L6hfRkGzQ\nnWIiMqaSHpGY2UXAPwEB8FV3v2HY8irgG8BZwH7gg+6+3cwuAG4AkkAa+LS7PxStswaYD/RFm7nQ\n3feMVcexdERSrO50N893PM/znc+zrX0bz3c8z7aObezo2kHOc0Pt6hP1LKxf+MqnLhwuqFvA3Jq5\npOKpMv4KESmlsh+RmFkAfBm4AGgDHjez1e7+dEGzq4CD7n6imV0O3Ah8ENgHvNPdd5nZ6cD9wIKC\n9T7s7kqGKahL1nFG6xmc0XrGIfMzuQw7unbwfOfztHW1hZ/uNrYc3MKaHWvI5DOHtJ9VNYu5tXOZ\nVzMvHNbOY27NXObWzGV2zWxaq1upS9TpqEbkKFbKU1vnAFvdfRuAmX0PuBQoDJJLgc9H43cDXzIz\nc/cnCtpsAlJmVuXuAyWsV4BEkOCEphM4oemEw5blPc+e3j20dbWxs3snu3t383LPy+zu3c2unl2s\n37OeznTnYeulghSzq2fTWtNKa3UrrTWttKRaaE41h5/qcNiSaqE6Xq3QETnClDJIFgA7CqbbgNeN\n1sbds2bWAbQQHpEMeh/wxLAQ+ZqZ5YAfAH/rI5yfM7NVwCqAxYsXT/GnCEDMYsyrnce82nmsZOSj\n3d5ML7t7d7O3dy97+vawr3cfe/v2hp/evfz+4O/5j13/Mep7WVJBilmpWcxKzaKpqommqqZDxptS\nTUPjjclGGqsaFT4iZVbKIBnpL3v4P/hjtjGz0whPd11YsPzD7r7TzOoJg+QjhNdZDt2I+63ArRBe\nI5lY6TJZNYmaoYv1Y+nP9nOw/yAH+g+M+GkfaKe9v50dXTto72+nK9M16rbisTiNyUYaqhqGwqU+\nWU99sp6GZMNhw7pkHfWJeuqSddQl60jE9CCnyFSUMkjagEUF0wuBXaO0aTOzONAIHAAws4XAPcAf\nu/tzgyu4+85o2GVm3yE8hXZYkEhlS8VTzK+bz/y6+UW1z+QzdAx00N7fzsGBg3QOdNKR7qBjIPpE\n450Dnezu3c3W9q10pjvpTnfjh/3/y7BaghS1iVrqk/XUJcJwqUvUUZOooS5RR22i9pB5tfFaahPh\npzpRPTRdHa8miAXTsXtEjiilDJLHgZPMbCmwE7gc+NCwNquBK4HfApcBD7m7m1kTcC9wrbv/x2Dj\nKGya3H2fmSWAdwAPlvA3SIVIxBLMrp494Xe25D1PT6aHrnQXXekuOtOddKW76M50h8N09yvjme6h\n6X19++jJ9NCd6aYn01P0C8iq49VDn5pEDTXxmnA8XkNNouaQ5al4amhZ4XQqniIVpA4dxlMkY0md\nwpOKVLIgia55XE14x1UA3OHum8zsemCtu68Gbge+aWZbCY9ELo9Wvxo4EfismX02mnch0APcH4VI\nQBgit5XqN8iRL2axodNck+Xu9GX76M320p3upifbQ2+ml55MNCyY7sn0DLXty4TD3mwv+/v305vp\npS/bR1+2j/5s/7hHSsMZRiqeoiqooiqoGhpPBSmq4lVD48kgOdSmKqgaWlb4SQSJofHB9slYcmj+\nIeNBUiEmY9KT7SJl4O4M5AYOCZah8Vw/A9kB+nLh/MJ2A9mBcHlu4JDxwXbDP+lcelKhNZJ4LE4y\nlhwKlkSQOCSE4rE4ySBJIpYgEUu8Mh4khuYdMj5sXjwWP2R4yHgw9vLCoV4KN33K/hyJiIzOzIZO\nWc1iVkm/y93J5rP05/pJ59Kkc+kwZPIF49H8dD6czuQyr8wf1i6TzxwyP5PLkM6H8/uz/XTmO8nk\nM2RymaFhOp8mm88OrTsdwTaamMWIW3wofOIWD4cFYTM4P4gFr0zH4iQscei8gnUDC+cHsWDE+cPb\nD7Yd3GZgQTgdSwyND9YwtGyUtjGLDX1XzGIVd3SoIBE5yplZ+H/9FfSagVw+F4ZM9EnnwqAZDJtM\nPnPIeCYXTmc9G44PDoe1H5wuXJ717NCywk/GM+TyObL5LAPZAXryPeQ8d8i2cp4bGmbyr7TPee6Q\nHiBm2mAADYbmUPhEATQYbjGLcdc776IqqCptPSXduojICIJY+A9eiiO3i52854eCZnjwDIZRLp8j\n6wWBlM8dEk6HDEdYVhhaec+/Mh1tN5vPhnVE6w4uK2wzE6f6FCQiIpMQsxgxi+k5JEBXpUREZEoU\nJCIiMiUKEhERmRIFiYiITImCREREpkRBIiIiU6IgERGRKVGQiIjIlBwTnTaa2V7ghUmuPptD39hY\nSVTb5Ki2yVFtk3Mk13a8u7eOt5FjIkimwszWFtP7ZTmotslRbZOj2ibnWKhNp7ZERGRKFCQiIjIl\nCpLx3VruAsag2iZHtU2Oapuco742XSMREZEp0RGJiIhMiYJERESmREEyCjO7yMyeNbOtZnZNuesZ\nzsy2m9lTZrbBzNaWuZY7zGyPmW0smNdsZj83sy3RsLQvJp9YbZ83s53RvttgZpeUoa5FZvZLM3vG\nzDaZ2Sei+WXfb2PUVvb9FtWRMrPHzOzJqL7rovlLzezRaN9938ySFVLX183s+YL9tmwm6xpWY2Bm\nT5jZT6Lp6dln7q7PsA8QAM8BJwBJ4Eng1HLXNazG7cDsctcR1fIWYAWwsWDePwDXROPXADdWUG2f\nBz5V5n02H1gRjdcDvwdOrYT9NkZtZd9vUU0G1EXjCeBR4PXAXcDl0fybgT+vkLq+DlxW7v0W1fVJ\n4DvAT6LpadlnOiIZ2TnAVnff5u5p4HvApWWuqWK5+8PAgWGzLwXujMbvBN49o0VFRqmt7Nz9JXdf\nH413Ac8AC6iA/TZGbRXBQ93RZCL6OPAHwN3R/Bnfd2PUVRHMbCHwduCr0bQxTftMQTKyBcCOguk2\nKugPKeLAA2a2zsxWlbuYEcx195cg/IcJmFPmeoa72sx+F536Kstpt0FmtgRYTvh/sBW134bVBhWy\n36JTNBuAPcDPCc8gtLt7NmpSlr/Z4XW5++B++7tov91kZlUzXVfkC8BfA/louoVp2mcKkpHZCPMq\n5v8sIm909xXAxcBfmtlbyl3QEeQrwKuAZcBLwP8rVyFmVgf8APgrd+8sVx0jGaG2itlv7p5z92XA\nQsIzCKeM1Gxmqzq8LjM7HbgWeA1wNtAMfGam6zKzdwB73H1d4ewRmk5qnylIRtYGLCqYXgjsKlMt\nI3L3XdFwD3AP4R9TJdltZvMBouGeMtczxN13R3/weeA2yrTvzCxB+A/1t939h9HsithvI9VWKfut\nkLu3A2sIr0U0mVk8WlTWv9mCui6KThW6uw8AX6M8++2NwLvMbDvhqfo/IDxCmZZ9piAZ2ePASdEd\nDUngcmB1mWsaYma1ZlY/OA5cCGwce60Ztxq4Mhq/EvhRGWs5xOA/1JH3UIZ9F52fvh14xt3/sWBR\n2ffbaLVVwn6L6mg1s6ZovBr4Q8LrOL8ELouazfi+G6WuzQX/Y2CE1yBmfL+5+7XuvtDdlxD+e/aQ\nu3+Y6dpn5b6LoFI/wCWEd6s8B/yPctczrLYTCO8kexLYVO76gO8SnurIEB7NXUV4/vUXwJZo2FxB\ntX0TeAr4HeE/3PPLUNebCE8j/A7YEH0uqYT9NkZtZd9vUX2vBZ6I6tgIfC6afwLwGLAV+FegqkLq\neijabxuBbxHd2VWuD3Aer9y1NS37TF2kiIjIlOjUloiITImCREREpkRBIiIiU6IgERGRKVGQiIjI\nlChIRCqYmZ032FOrSKVSkIiIyJQoSESmgZldEb2LYoOZ3RJ13tdtZv/PzNab2S/MrDVqu8zMHok6\n8btnsPNDMzvRzB6M3mex3sxeFW2+zszuNrPNZvbt6AlpkYqhIBGZIjM7BfggYUeay4Ac8GGgFljv\nYeeavwL+Z7TKN4DPuPtrCZ94Hpz/beDL7n4m8AbCJ/Ih7H33rwjfCXICYb9JIhUjPn4TERnHW4Gz\ngMejg4Vqws4W88D3ozbfAn5oZo1Ak7v/Kpp/J/CvUd9pC9z9HgB37weItveYu7dF0xuAJcC/l/5n\niRRHQSIydQbc6e7XHjLT7LPD2o3VH9FYp6sGCsZz6O9WKoxObYlM3S+Ay8xsDgy9d/14wr+vwZ5V\nPwT8u7t3AAfN7M3R/I8Av/LwfR9tZvbuaBtVZlYzo79CZJL0fzYiU+TuT5vZ3xC+sTJG2NPwXwI9\nwGlmtg7oILyOAmF33TdHQbEN+NNo/keAW8zs+mgb75/BnyEyaer9V6REzKzb3evKXYdIqenUloiI\nTImOSEREZEp0RCIiIlOiIBERkSlRkIiIyJQoSEREZEoUJCIiMiX/Hx5Kgl5VUKGRAAAAAElFTkSu\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x150b6f650>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "\n",
    "print(history.history.keys())  \n",
    "\n",
    "plt.plot(history.history['loss'])  \n",
    "\n",
    "# summary for loss\n",
    "plt.plot(history.history['loss'])  \n",
    "plt.plot(history.history['val_loss'])  \n",
    "plt.title('model loss')  \n",
    "plt.ylabel('loss')  \n",
    "plt.xlabel('epoch')  \n",
    "plt.legend(['train', 'test'], loc='upper left')  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feedforward Model 2    \n",
    "  \n",
    "  \n",
    "**Feed the clean and noisy patches from the feedforward model 1 through the input and encoding layers of model 2.  ** \n",
    "  \n",
    "**Note:** The weights of the encoding layer must equal the encoding layer weights obtained from the trained model 2.  \n",
    "This model will transform your flattened 16x16 images to flattened 32x32 images, which can be used for testing and debugging the trained model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(480000, 1024)\n",
      "(480000, 1024)\n"
     ]
    }
   ],
   "source": [
    "# this is the size of our encoded representations\n",
    "encoding_dim = 1024\n",
    "input_img = Input(shape=(256,))\n",
    "\n",
    "encoded_model2 = Dense(encoding_dim, activation='relu')(input_img)\n",
    "\n",
    "# this model maps an input to its encoded representation\n",
    "encoder_model2 = Model(input_img, encoded_model2)\n",
    "\n",
    "#set weights\n",
    "encoder_model2.set_weights([weights_model2[0][0], weights_model2[0][1]])\n",
    "\n",
    "#compile\n",
    "encoder_model2.compile(optimizer='adadelta', loss='mean_squared_error')\n",
    "\n",
    "# save the O/P 32x32\n",
    "encoder_clean2 = encoder_model2.predict(encoder_clean)\n",
    "\n",
    "print encoder_clean2.shape\n",
    "\n",
    "# save the O/P 32x32\n",
    "encoder_noisy2 = encoder_model2.predict(encoder_noisy)\n",
    "\n",
    "print encoder_noisy2.shape\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "## STACKED SPARSE DENOISING  AUTOENCODER\n",
    "### Train the SSDA\n",
    "  \n",
    "The SSDA model will take patches of size 8x8 as input.  \n",
    "\n",
    "The first encoding layer expands an 8x8 patch to 16x16.  The second encoding layer expands a 16x16 patch to 32x32.  We then introduce the two decoding layers, which decrease the image from 32x32 to 16x16 to 8x8.  The purpose of our model is take a noisy 8x8 image as input and return a clean 8x8 image as output.\n",
    "\n",
    "The weights of the two encoding layers must be initialized with the encoding layer weights that were saved from the corresponding single autoencoder models above.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_img1 = Input(shape=(64,))\n",
    "\n",
    "encoded1 = Dense(256, activation='relu')(input_img1)\n",
    "\n",
    "encoded2 = Dense(1024, activation='relu')(encoded1)\n",
    "\n",
    "# \"decoded\" used encoded i/p of noisy data 32x32 dim\n",
    "decoded1 = Dense(256, activation='sigmoid', kernel_initializer='random_normal',\n",
    "                bias_initializer='zeros')(encoded2)\n",
    "\n",
    "decoded2 = Dense(64, activation='sigmoid', kernel_initializer='random_normal',\n",
    "                bias_initializer='zeros')(decoded1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# send the model\n",
    "autoencoder_ssda = Model(input_img1, decoded2)\n",
    "\n",
    "\n",
    "# set the weights 1\n",
    "autoencoder_ssda.layers[1].set_weights([weights_model1[0][0], weights_model1[0][1]])\n",
    "# set the weights 2\n",
    "autoencoder_ssda.layers[2].set_weights([weights_model2[0][0], weights_model2[0][1]])\n",
    "\n",
    "# compile it now\n",
    "autoencoder_ssda.compile(optimizer='adadelta', loss='mean_squared_error', metrics=['accuracy'])\n",
    "\n",
    "# weights_ssda =[]\n",
    "# weights_ssda.append(autoencoder_ssda.get_weights())\n",
    "\n",
    "# autoencoder_ssda.set_weights([weights_model1[0][0], \n",
    "#                          weights_model1[0][1],\n",
    "#                          weights_model2[0][0], \n",
    "#                          weights_model2[0][1], \n",
    "#                          weights_ssda[0][4], \n",
    "#                          weights_ssda[0][5],\n",
    "#                          weights_ssda[0][6], \n",
    "#                          weights_ssda[0][7]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 480000 samples, validate on 240000 samples\n",
      "Epoch 1/40\n",
      "480000/480000 [==============================] - 65s - loss: 0.0165 - acc: 0.0231 - val_loss: 0.0094 - val_acc: 0.0339\n",
      "Epoch 2/40\n",
      "480000/480000 [==============================] - 54s - loss: 0.0080 - acc: 0.0537 - val_loss: 0.0081 - val_acc: 0.0521\n",
      "Epoch 3/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0069 - acc: 0.0510 - val_loss: 0.0069 - val_acc: 0.0517\n",
      "Epoch 4/40\n",
      "480000/480000 [==============================] - 77s - loss: 0.0059 - acc: 0.0533 - val_loss: 0.0061 - val_acc: 0.0559\n",
      "Epoch 5/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0054 - acc: 0.0576 - val_loss: 0.0057 - val_acc: 0.0590\n",
      "Epoch 6/40\n",
      "480000/480000 [==============================] - 55s - loss: 0.0051 - acc: 0.0617 - val_loss: 0.0054 - val_acc: 0.0638\n",
      "Epoch 7/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0049 - acc: 0.0643 - val_loss: 0.0052 - val_acc: 0.0674\n",
      "Epoch 8/40\n",
      "480000/480000 [==============================] - 55s - loss: 0.0047 - acc: 0.0676 - val_loss: 0.0051 - val_acc: 0.0697\n",
      "Epoch 9/40\n",
      "480000/480000 [==============================] - 59s - loss: 0.0045 - acc: 0.0704 - val_loss: 0.0048 - val_acc: 0.0734\n",
      "Epoch 10/40\n",
      "480000/480000 [==============================] - 54s - loss: 0.0045 - acc: 0.0731 - val_loss: 0.0049 - val_acc: 0.0745\n",
      "Epoch 11/40\n",
      "480000/480000 [==============================] - 53s - loss: 0.0043 - acc: 0.0754 - val_loss: 0.0047 - val_acc: 0.0763\n",
      "Epoch 12/40\n",
      "480000/480000 [==============================] - 155s - loss: 0.0041 - acc: 0.0770 - val_loss: 0.0045 - val_acc: 0.0800\n",
      "Epoch 13/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0040 - acc: 0.0792 - val_loss: 0.0043 - val_acc: 0.0818\n",
      "Epoch 14/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0039 - acc: 0.0807 - val_loss: 0.0042 - val_acc: 0.0843\n",
      "Epoch 15/40\n",
      "480000/480000 [==============================] - 55s - loss: 0.0038 - acc: 0.0822 - val_loss: 0.0041 - val_acc: 0.0849\n",
      "Epoch 16/40\n",
      "480000/480000 [==============================] - 60s - loss: 0.0037 - acc: 0.0835 - val_loss: 0.0041 - val_acc: 0.0855.08\n",
      "Epoch 17/40\n",
      "480000/480000 [==============================] - 60s - loss: 0.0036 - acc: 0.0849 - val_loss: 0.0039 - val_acc: 0.0874\n",
      "Epoch 18/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0036 - acc: 0.0859 - val_loss: 0.0039 - val_acc: 0.0879\n",
      "Epoch 19/40\n",
      "480000/480000 [==============================] - 58s - loss: 0.0035 - acc: 0.0870 - val_loss: 0.0038 - val_acc: 0.0901\n",
      "Epoch 20/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0035 - acc: 0.0881 - val_loss: 0.0038 - val_acc: 0.0906\n",
      "Epoch 21/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0034 - acc: 0.0889 - val_loss: 0.0037 - val_acc: 0.0935\n",
      "Epoch 22/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0034 - acc: 0.0898 - val_loss: 0.0038 - val_acc: 0.0930\n",
      "Epoch 23/40\n",
      "480000/480000 [==============================] - 59s - loss: 0.0034 - acc: 0.0907 - val_loss: 0.0037 - val_acc: 0.0947\n",
      "Epoch 24/40\n",
      "480000/480000 [==============================] - 58s - loss: 0.0033 - acc: 0.0918 - val_loss: 0.0037 - val_acc: 0.0965\n",
      "Epoch 25/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0033 - acc: 0.0928 - val_loss: 0.0036 - val_acc: 0.0969\n",
      "Epoch 26/40\n",
      "480000/480000 [==============================] - 59s - loss: 0.0033 - acc: 0.0938 - val_loss: 0.0036 - val_acc: 0.0979\n",
      "Epoch 27/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0032 - acc: 0.0948 - val_loss: 0.0036 - val_acc: 0.0985\n",
      "Epoch 28/40\n",
      "480000/480000 [==============================] - 58s - loss: 0.0032 - acc: 0.0957 - val_loss: 0.0035 - val_acc: 0.1006\n",
      "Epoch 29/40\n",
      "480000/480000 [==============================] - 58s - loss: 0.0032 - acc: 0.0970 - val_loss: 0.0035 - val_acc: 0.1033\n",
      "Epoch 30/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0032 - acc: 0.0982 - val_loss: 0.0035 - val_acc: 0.1023\n",
      "Epoch 31/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0031 - acc: 0.0991 - val_loss: 0.0034 - val_acc: 0.1017\n",
      "Epoch 32/40\n",
      "480000/480000 [==============================] - 60s - loss: 0.0031 - acc: 0.1004 - val_loss: 0.0034 - val_acc: 0.1050\n",
      "Epoch 33/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0031 - acc: 0.1013 - val_loss: 0.0033 - val_acc: 0.1082\n",
      "Epoch 34/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0030 - acc: 0.1023 - val_loss: 0.0033 - val_acc: 0.1076\n",
      "Epoch 35/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0030 - acc: 0.1036 - val_loss: 0.0033 - val_acc: 0.1079\n",
      "Epoch 36/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0030 - acc: 0.1047 - val_loss: 0.0033 - val_acc: 0.1081\n",
      "Epoch 37/40\n",
      "480000/480000 [==============================] - 141s - loss: 0.0029 - acc: 0.1057 - val_loss: 0.0032 - val_acc: 0.1103\n",
      "Epoch 38/40\n",
      "480000/480000 [==============================] - 57s - loss: 0.0029 - acc: 0.1066 - val_loss: 0.0032 - val_acc: 0.1114\n",
      "Epoch 39/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0029 - acc: 0.1076 - val_loss: 0.0032 - val_acc: 0.1124\n",
      "Epoch 40/40\n",
      "480000/480000 [==============================] - 56s - loss: 0.0029 - acc: 0.1085 - val_loss: 0.0032 - val_acc: 0.1141\n"
     ]
    }
   ],
   "source": [
    "history = autoencoder_ssda.fit(train_noisy_patch,\n",
    "                               train_patch,\n",
    "                               batch_size=1000,\n",
    "                               epochs=40,\n",
    "                               validation_data=(validate_noisy_patch, validate_patch))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save SSDA Model Weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder_ssda.save_weights(\"/Users/divyaagarwal/Desktop/Computervision/Assignment2Autoencoders/ssda.h5\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the Loss from SSDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['acc', 'loss', 'val_acc', 'val_loss']\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1528ce8d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x150aea790>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "\n",
    "print(history.history.keys())  \n",
    "   \n",
    "# summarize history for accuracy  \n",
    "   \n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()   \n",
    "      \n",
    "plt.plot(history.history['loss'])  \n",
    "plt.plot(history.history['val_loss'])  \n",
    "plt.title('model loss')  \n",
    "plt.ylabel('loss')  \n",
    "plt.xlabel('epoch')  \n",
    "plt.legend(['train', 'test'], loc='upper left')  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run SSDA on Noisy Test Images and Calculate Mean Squared Error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_prediction = autoencoder_ssda.predict(test_noisy_patch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder_ssda.save_weights(\"/Users/divyaagarwal/Desktop/Computervision/Assignment2Autoencoders/model2.h5\") \n",
    "#mean_squared_error(test_patch, final_prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----\n",
    "## VISUALIZE RESULTS  \n",
    "Use the image 119082.jpg from the validate image set to visualize effectiveness of the SSDA model.\n",
    "  \n",
    "**Load and Display the image**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 38  37  37 ..., 171 170 170]\n",
      " [ 31  30  30 ..., 169 170 171]\n",
      " [ 29  26  25 ..., 171 170 170]\n",
      " ..., \n",
      " [255 243 231 ..., 248 253 246]\n",
      " [125  71  41 ..., 252 255 246]\n",
      " [ 66  77  55 ..., 206 182 114]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x151ba7e50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "img = validate[10]\n",
    "print img\n",
    "plt.imshow(img,  cmap='gray')\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create patches from the image**  \n",
    "Select a patch with significant contrast (for example, a clearly defined vertical or horizontal line)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.23529412  0.23921569  0.24313725  0.24313725  0.23921569  0.23529412\n",
      "  0.22745098  0.22745098  0.23921569  0.23921569  0.23921569  0.23921569\n",
      "  0.23529412  0.23137255  0.22352941  0.21960784  0.24313725  0.24313725\n",
      "  0.24313725  0.23921569  0.23529412  0.22745098  0.22352941  0.21960784\n",
      "  0.24313725  0.24705882  0.24313725  0.23921569  0.23137255  0.22745098\n",
      "  0.22352941  0.22352941  0.23921569  0.24313725  0.24705882  0.23921569\n",
      "  0.22352941  0.21568627  0.21960784  0.22352941  0.24313725  0.24705882\n",
      "  0.24705882  0.23921569  0.22352941  0.21568627  0.21568627  0.22352941\n",
      "  0.24313725  0.24705882  0.24705882  0.23921569  0.22745098  0.21960784\n",
      "  0.21960784  0.22352941  0.23921569  0.23921569  0.23921569  0.23529412\n",
      "  0.22745098  0.22352941  0.21960784  0.21960784]\n"
     ]
    }
   ],
   "source": [
    "clean_patch_img = validate_patch[2400*9 : 2400*10 -1]\n",
    "print clean_patch_img[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "noisy_patch_img = validate_noisy_patch[2400*9 : 2400*10 -1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Display the clean patch**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAA5ZJREFUeJzt3cttAkEURUGwnAdkjshkQhkiGYfgDf0YjqrWiOZ31Buk\nez2O4wI0/Xz6BQDrCBzCBA5hAocwgUOYwCFM4BAmcAgTOIT9rnjS5/M59ve4+/0+ddToWdP2fU+e\ntW3b2FnTHo/H9b/HuMEhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCB\nQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQtmS6qDrxMzm5M606XTT9nZ3tN+IGhzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJ\nHMIEDmEChzCBQ5jpohM72wzOu1Tf1xm5wSFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4\nhAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAhbsk026Xa7jZ31er3G\nzppmL+w9zrbL5waHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFD2JLpouoMzuRM0uUy+zlu25Y8a3pKyHQRMEbgECZw\nCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIUzgELZkumhyvmV6TojvMj2jZboIGCNwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCFsyXcT3mZzcOdu8T5kb\nHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOY\nwCFM4BAmcAgTOIQJHMIEDmECh7Al22T7vq942o+fNa363ia3yaY/w7N9Z25wCBM4hAkcwgQOYQKH\nMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZw\nCBM4hF2P4/j0awAWcYNDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIUzgECZwCBM4hAkcwgQOYX99UEr7LS7K9gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x153b45c90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAA7xJREFUeJzt3cGN2gAQQFGIcsYNLA1ABVRA/wc6oAHTAOkgvqyHzc97\n5xVjLL7mstIc3+/3AWj69ekHAPYjcAgTOIQJHMIEDmEChzCBQ5jAIUzgEPZ7jw+93W5j/x63LMvU\nqHHruo7Ner1eY7Oez+fYrMnvdTgcDpfLZWzW4/E4bv2NDQ5hAocwgUOYwCFM4BAmcAgTOIQJHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAoewXU4XTZ+L\nqZp8j6fTaWzW19fX2Kzp3+L5fB6dt8UGhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQ\nJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ9gup4smOZP075k8kzQ56xPz\nttjgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJ\nHMIEDmEChzCBQ5jAIUzgECZwCBM4hO1ym+yn3Wf6LtN30Cbf47IsY7PWdR2b9b/frrPBIUzgECZw\nCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIUzgELbL6SL4m/I5oZ92tssGhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQ\nJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ9gup4vKp2kmLcvy6UfYxeR5\nn+l3eL1eR+dtscEhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQtsvpoqrJkzt8j8vlMjrvfr+Pzttig0OYwCFM4BAm\ncAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5h\nAocwgUOYwCFM4BDmNhlpy7KMzpu+hbbFBocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzg\nECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUPY8f1+f/oZgJ3Y4BAmcAgT\nOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocw\ngUPYH9L6Nq9B0ip9AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x152d12e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABBxJREFUeJzt3bFOG1EURdFxFNzgZlzANHYFDd/Gt1NR0Th1JCRXc0Fb\na9WRr+No6zWRzuF2uy1A05+f/gLAfgQOYQKHMIFDmMAhTOAQJnAIEziECRzC/u7xoYfDYey/x63r\nOnVquV6vY7eWZVm2bRu7dTqdkrem/82enp7Gbr2/vx/u/RkvOIQJHMIEDmEChzCBQ5jAIUzgECZw\nCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMJ2mS56\nfHzc42O/VZ3cmb43OfFzuVzGbp3P57Fby7Isx+Nx9N49XnAIEziECRzCBA5hAocwgUOYwCFM4BAm\ncAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE7TJdNGly\nmmbbtrFb0/een5/Hbr28vIzdmp6b+vr6Gr13jxccwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5h\nAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHsF22ySb3oCa3\nya7X69itZZndC5v8HSdNb5Mdj8fRe/d4wSFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4\nhAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BC2y3TR5XLZ42O/tW3b2K11\nXcduLcvsVNLkdNHkvM/0lNBvm4DygkOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4\nhAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFsl+mi19fXPT72W6fTaezW9AzO\n5N9tcgJq+nec9Pn5+dNf4T9ecAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFD\nmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOITtMl00OYOzruvYrev1OnZrWWZ/x/P5\nPHZrcpJpekro4+Nj9N49XnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCdtkmm9wLe3t7S95altltssm9sIeH\nh+St38gLDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocw\ngUOYwCFM4BAmcAgTOIQJHMIEDmECh7DD7Xb76e8A7MQLDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQO\nYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIT9A54BIgbmKA1zAAAAAElF\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1533ecbd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAA/VJREFUeJzt3cFt61YQQNGnIBWYVguienD/Pdg12HQLSgMBnA1H+dfn\nrIk3JKCLtxEwl8fjsYCmv579AsB5BA5hAocwgUOYwCFM4BAmcAgTOIQJHML+PuPQy+Uy9ve4bdum\nRq37/T42a621brfb2KzjOMZmfXx8jM36+voam7XWWq+vr2Oz3t/fLz894waHMIFDmMAhTOAQJnAI\nEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKH\nMIFD2Cmri/Z9P+PYfzW5KmZyldBaa12v19F5UyZ/H5Oz/o/c4BAmcAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAj741cX\nbds2Nmt6ldDkt03OOo5jbNbkd601u0rrv3CDQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQ\nJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgEHbKbjL+PJM7tSZn\n3W63sVlrze+v+4kbHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmGnrC46juOMY3+dbdue/QqnmFxdNL1KaN/30Xk/\ncYNDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZw\nCBM4hAkcwgQOYQKHMIFDmMAh7JTVRdWVO2WT64ReXl7GZv12bnAIEziECRzCBA5hAocwgUOYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziEnbK6\n6O3t7Yxjn25yvc/0vOo6oc/Pz2e/wmn2ff/xGTc4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzC\nBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYafsJrvf72cc\n+3TT+7uu1+vovCmT+8K+v7/HZk3Ps5sMfjmBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQ\nJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ9jl8Xg8+x2Ak7jBIUzgECZw\nCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nh7B/AIKEL/gh0c2oAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x15397af90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    patch = clean_patch_img[i]\n",
    "    patch = patch.reshape(8,8) * 255.0\n",
    "    plt.imshow(patch,  cmap='gray')\n",
    "    plt.axis('off')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Display the noisy patch**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABOxJREFUeJzt3a2K1lschuHfiIJBsIhG8QBEPADBIPiVjIpN0IPwCCyW\nSSaLICaDRZ0TsIhFmGwUdRCDH0HefQJupjhrw72vK/9ZzzvhZpWBtbXZbAZoOvRf/wDg4AgcwgQO\nYQKHMIFDmMAhTOAQJnAIEziEHT6IQy9cuLDs3+OuXr26ampu3LixbGtm5unTp8u2Xr16tWzr9OnT\ny7auXbu2bGtm5u3bt8u2tre3t/b7xg0OYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHsAN5uujBgwcHcewfnTlzZtnW\nnTt3lm3NzJw7d27Z1uPHj5dt/fr1a9nW3t7esq2ZmXfv3i3d248bHMIEDmEChzCBQ5jAIUzgECZw\nCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmFb\nm83mrx968eLFv3/ov/j69euqqTl//vyyrZmZnz9/Ltt68+bNsq3t7e1lW8ePH1+2NTPz4cOHZVu3\nb9/e2u8bNziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkc\nwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hB/I22ZMnT5a9TXb06NFVU3PixIllWzMzr1+/Xrb1\n6dOnZVs7OzvLtg4fPrxsa2bmyJEjy7Z2d3e9TQb/ZwKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocw\ngUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHsAN51+X9+/cHcewf\nHTt2bNnW79+/l23NzNy6dWvZ1v3795dtPXr0aNnWyqeEZtY/b7UfNziECRzCBA5hAocwgUOYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzC\ntjabzV8/9OPHj3//0H9x6tSpVVNz8+bNZVsza/+2b9++Ldv68uXLsq3Lly8v25qZef78+bKtnZ2d\nrf2+cYNDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzg\nECZwCBM4hAkcwgQOYQKHMIFDmMAh7ECeLvrx48eyp4suXbq0ampevny5bGtm5sqVK8u2zp49u2zr\n0KF198qzZ8+Wbc3MnDx5ctnW7u6up4vg/0zgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCDt8EId+/vz5II79o+/f\nvy/bevHixbKtmZnr168v23r48OGyrbt37y7b2tvbW7Y1M3Pv3r2le/txg0OYwCFM4BAmcAgTOIQJ\nHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOY\nwCFsa7PZ/Ne/ATggbnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzg\nECZwCBM4hAkcwgQOYQKHMIFDmMAh7B+pjIJDTyXUZgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x153a6f1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABOZJREFUeJzt3aGKllsYhuF3NhYRiwYHg8WkgskqRrsegDDRZLeJYBfE\n4DRNFgWPwGLRokFBMIkGg0xTg8w+gZEp/mtvbq4rf6xnwtys8sPa2t/fH6Dpn//6DwA2R+AQJnAI\nEziECRzCBA5hAocwgUOYwCHsyCYOffLkybKfx71582bV1Ozs7Czbmpm5cePGsq29vb1lW48fP162\ndefOnWVbMzO/fv1atvXy5cutw75xg0OYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4\nhAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFsI08Xffv2bRPHHujEiRPLti5d\nurRsa2bm9u3by7bevn27bOvy5cvLto4c2ci/+B/dv39/6d5h3OAQJnAIEziECRzCBA5hAocwgUOY\nwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAI29rf\n3//rh164cOHvH/oHV65cWTU1V69eXbY1M7O7u7tsa3t7e9nW8ePHl229ePFi2dbMzLt375ZtHT16\ndOuwb9zgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgT\nOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hB3ZxKEPHz7cxLEH+v3797Kta9euLduamTl58uSyrVu3\nbi3b2tvbW7b1+vXrZVszM2fPnl229fXr10O/cYNDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhbCNPF507d24Txx7o\n+/fvy7bOnz+/bGtmZmdnZ9nWgwcPlm19/vx52dbHjx+Xbc3MXL9+feneYdzgECZwCBM4hAkcwgQO\nYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzg\nECZwCNvI00X37t3bxLEHunnz5rKtra2tZVszM7u7u8u2vnz5smzrx48fy7Y+fPiwbGtm5tOnT0v3\nDuMGhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ9hGni46duzYJo490M+fP5dtPXr0aNnWzNpnmV69erVs6/3798u2\nTp8+vWxrZmZ7e3vp3mHc4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFD\nmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIRt7e/v//VD7969+/cP/YOVb0GtfAdt\nZubixYvLtp4/f75s69mzZ8u2nj59umxrZubMmTPLtk6dOrV12DducAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIRt\n5Oki4P/BDQ5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKH\nMIFDmMAhTOAQJnAIEziE/QssKnkdBv32rgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1533fae10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABNVJREFUeJzt3bFqFFoYRtE/ojaWFmIhaMBSiI3gA4iNjVax0ya9z+LD\nBEtB7LUQLdTeiAYVJFjMfYFccgvnXNisVQ/nmwQ2pxk4O5vNZoCmc//3FwC2R+AQJnAIEziECRzC\nBA5hAocwgUOYwCHs/DYOvXTp0rKfx+3t7a2ams+fPy/bmpl58uTJsq2XL18u23r8+PGyrdevXy/b\nmpm5fPnysq3nz5/vnPUZNziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzg\nECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCtvJ00a1bt7Zx7KlWPk1z9erVZVszMzdu\n3Fi29fHjx2Vbnz59Wrb16NGjZVszM0dHR0v3zuIGhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFD\nmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ9hWni7a3d3dxrGn\nOn9+K3/Cqe7cubNsa2bm7du3y7YODg6WbR0eHi7b+v79+7KtmZlr164t3TuLGxzCBA5hAocwgUOY\nwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAoewrTzsdXx8vI1jT/Xnz59lW3fv3l22NTPz6tWrZVtfv35dtvXgwYNlW9++fVu2NTPz\n4cOHZVv/5f/oBocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKH\nMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUPYVp4uevfu3TaOPdX+/v6yrTdv3izbmpl5+vTpsq3D\nw8NlWzdv3ly29eXLl2VbMzP37t1buncWNziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCdjabzV8/9P79+3//0H9x\n5cqVVVNzcHCwbGtm5v3798u2Ll68uGzrx48fy7bOnVt7h52cnCzbevbs2c5Zn3GDQ5jAIUzgECZw\nCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIez8Ng7d39/fxrGnevHixbKtnz9/LtuamTk6Olq29fDhw2Vbv3//Xra1u7u7bGtmZmfn\nzNeElnKDQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgELaVt8lWvj11/fr1ZVt7e3vLtmZmjo+Pl22dnJws27p9\n+/ayrV+/fi3bmpm5cOHC0r2zuMEhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQtrPZbP7v7wBsiRscwgQOYQKHMIFD\nmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCPsH\ni4J1ZT6gfHoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x153d6a710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABOhJREFUeJzt3SGL1VsfhuHfPhiMomDQoDIg2KaaBD+AWMVg0iwIE2S6\noM1s1qggmASxWA02wSCIRYNNEWHeLzCHKe71Hm6uK/9Zzy43q2xYm4ODgwGa/vl//wBgewQOYQKH\nMIFDmMAhTOAQJnAIEziECRzCjm3j0M1ms+zvcbu7u6um5vz588u2ZmZu3bq1bOvx48fLtnZ2dpZt\nXbhwYdnWzMyxY1tJ6lB7e3ubo75xg0OYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4\nhAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFsK++sXLx4cRvHHuratWvLtr59\n+7Zsa2bm0aNHy7Y2myNfwflrfv78uWzrzZs3y7ZmZi5durR07yhucAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIRt\n5emi/f39bRx7qLNnzy7bevfu3bKtmZn79+8v2/r48eOyrdu3by/bevny5bKtmZknT54s3TuKGxzC\nBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAh\nTOAQJnAIEziECRzCBA5hAoewrbxNdvfu3W0ce6hnz54t29rd3V22NTNz8+bNZVt//vxZtnXmzJll\nW79+/Vq2NTPz6dOnpXtHcYNDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhbHNwcPDXD339+vXfP/Rf/P79e9XUfP36\nddnWzMyJEyeWbT19+nTZ1tWrV5dtXblyZdnWzNqni65fv7456hs3OIQJHMIEDmEChzCBQ5jAIUzg\nECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMKO\nbePQhw8fbuPYQ508eXLZ1tu3b5dtzcxcvnx52dadO3eWbX3+/HnZ1ocPH5Ztzcx8//596d5R3OAQ\nJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQO\nYQKHMIFDmMAhTOAQJnAI28rTRTs7O9s49lB7e3vLtl68eLFsa2bmx48fy7bOnTu3bOvVq1fLtvb3\n95dtzcycPn166d5R3OAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziEbQ4ODv76oV++fPn7h/6LU6dOrZqaGzdu\nLNuambl3796yrefPny/bevDgwbKt9+/fL9uamTl+/Piyrd3d3c1R37jBIUzgECZwCBM4hAkcwgQO\nYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzg\nELaVp4uA/wY3OIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAocwgUOYwCFM4BD2Py7ycN1Am5qlAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x153e8e990>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    patch = noisy_patch_img[i]\n",
    "    patch = patch.reshape(8,8) * 255.0\n",
    "    plt.imshow(patch,  cmap='gray')\n",
    "    plt.axis('off')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Feed the noisy patch through the trained SSDA model and display the resulting denoised image**  \n",
    "\n",
    "Does the denoised patch resemble the clean patch?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "output = final_prediction[2400*9 : 2400*10-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABJ1JREFUeJzt3bFOlFsYhtGNUQuJYwxWtHSW3oHx+insjJUlMWoAFQRF\nzg1wMtX/mTxZqyb7nUAedjPJPri/v19A06N//QGA7QgcwgQOYQKHMIFDmMAhTOAQJnAIEziEPd7i\n0JOTk7Gvx/3+/Xtqaj16NPv/8ObmZmzr+/fvY1u3t7djW4eHh2Nba601+c3Q8/Pzg30/4waHMIFD\nmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4\nhAkcwgQOYQKHMIFD2CZPF7169WqLYx80+bzP8+fPx7bWWuvs7Gx0b8rl5eXY1vX19djWWmvtdrvR\nvX3c4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAocwgUOYwCFM4BAmcAjb5Omid+/ebXHsg54+fTq2dXV1Nba11lofP34c2/r06dPY1s+f\nP8e2pv9mFxcXo3v7uMEhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCB\nQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAI2+Rtsrdv325x7INevnw5tvXjx4+xrbXW\nev369djW6enp2NbBwcHY1tevX8e21lrr5uZmdG8fNziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJ\nHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCNnm66M2bN1sc\n+6Ddbje29evXr7GttdY6Pj4e27q6uhrb+vLly9jWhw8fxrbWWuvPnz+je/u4wSFM4BAmcAgTOIQJ\nHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOY\nwCFM4BC2ydNFk8/gHB0djW1NP0vz7Nmzsa2Tk5Oxrc+fP49t3d3djW2ttdbfv39H9/Zxg0OYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzC\nBA5hAocwgUOYwCFsk6eLzs7Otjj2Qd++fRvbmnxKaK21njx5Mrb14sWLsa3j4+Oxrevr67Gttda6\nuLgY3dvHDQ5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKH\nMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUPYJm+TvX//fotjH3R0dDS29fjxJr+u/7Xb7ca2Jt/w\nur29Hds6PDwc21prrfPz89G9fdzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5h\nAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCDu4v7//158B2IgbHMIEDmEChzCB\nQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAj7\nD82UeryjtD8VAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x154308e50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABHxJREFUeJzt3cFKVW0YhuEv+WmnFYXoQIMGDkM6fzqBBp1Bo0ZRDhxE\ngg52+z8BwSbrDW6uayzrUfTeayK8zw6HwwKajv71NwBsR+AQJnAIEziECRzCBA5hAocwgUOYwCHs\nvy0e+unTp7F/j/v69evU1Pry5cvY1lprffv2bWzr58+fY1v7/X5sa7fbjW2ttdbr16/Htj5//vzs\nqa/xBocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAh\nTOAQJnAIEziECRzCBA5hAocwgUPYJqeLTk9Pt3jso169ejW2dXQ0+3n4+/fvsa2bm5uxrT9//oxt\nnZ+fj22tNfv3+De8wSFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFD\nmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BC2yemi/X6/xWMfdTgcxrYeHh7Gtqb3Jn9nu91u\nbGvyTNJaThcBgwQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHsE1uk03e1Jrcuru7G9taa63b29uxrV+/fo1tHR8f\nj229efNmbGut2Z/tb3iDQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5h\nAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIWyT00VHR3OfG/f392Nbh8NhbGt678WLF2Nb\nJycnY1tnZ2djW2s5XQQMEjiECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzg\nECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziEbXK66Pnz51s89lFv375Nbq211rt378a2drvd\n2Nb5+fnY1sXFxdjWWmtdXV2N7j3FGxzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hm5wuur6+3uKxj9rv92Nb379/\nH9taa/YE1I8fP8a2Jk9Affz4cWxrrbUuLy9H957iDQ5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUPYJrfJTk5O\ntnjsoyZvQX348GFsa621Xr58ObZ1cXExtvX+/fuxrck7aGutdXp6Orr3FG9wCBM4hAkcwgQOYQKH\nMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZw\nCBM4hD07HA7/+nsANuINDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAocwgUOYwCFM4BAmcAgTOIT9D4ghXFazojKQAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x154ec7a10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABKNJREFUeJzt3bFqlFsYhtHtiUiCiEFLY6GIhYUgWOYavCLv0jJN0ihG\nUDQgionjDQRymv/znIe16mG/M5CH3QT2rd1ut4Cmf/72FwC2I3AIEziECRzCBA5hAocwgUOYwCFM\n4BB2e4tD37x5M/bvcZeXl1NT6/Xr12Nba631+PHjsa3v37+Pbf369Wts686dO2Nba6317du3sa23\nb9/euukzbnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4\nhAkcwgQOYQKHMIFDmMAhTOAQJnAIEziEbfJ00bt377Y49lqHh4djWycnJ2Nba611dnY2trW3tze2\n9eXLl7Gthw8fjm2ttdbR0dHo3k3c4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQO\nYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAjb5Omi09PTLY691qNHj8a2pp/B\n+f3799jWz58/x7YmffjwYXRvf39/dO8mbnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCNnmb7N69e1sce637\n9++PbU3+rrXWOjo6Gtu6uLgY27q6uhrb2tvbG9taa63Dw8PRvZu4wSFM4BAmcAgTOIQJHMIEDmEC\nhzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BC2\nydNFL1682OLYa718+XJs6/j4eGxrrbWePXs2tvXjx4+xrY8fP45tTT839V/jBocwgUOYwCFM4BAm\ncAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5h\nAocwgUPY//7poufPn49tvXr1amxrrbWePHkytjX5dNHFxcXY1m63G9taa62nT5+O7t3EDQ5hAocw\ngUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAI\nEziECRzCBA5hAoewTZ4umvT169exrbOzs7Gttda6e/fu2Nb79+/Htm7fnvuze/DgwdjWWmt9/vx5\nbOvf/DY3OIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzC\nBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmGbPBJ1cnKyxbHX2t/fH9s6PT0d21prrcvLy7Gtg4OD\nsa2rq6uxrU+fPo1trbXW+fn52Nbx8fGNn3GDQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQ\nJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIezWbrf7298B2IgbHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM\n4BAmcAj7A+TZZf6fV6RbAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x154f63b90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAD8CAYAAABaQGkdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAABJVJREFUeJzt3T9L1m0ch+HLpySC/gyJRIVTGARO9ZqcfaMtri4OjVEN\naZKGvQEfbPl9g5PjmOX63Mp9ci3CtXN7e7uApv/+9QcAtiNwCBM4hAkcwgQOYQKHMIFDmMAhTOAQ\n9nCLQ4+Pj8f+Pe7Tp09TU+v09HRsa621bm5uxrZevnw5tvXu3buxrffv349trbXW4eHh2NbJycnO\nfT/jBocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAh\nTOAQJnAIEziECRzCBA5hAocwgUPYJk8XvXr1aotj7/T169exrcmnhNZa6+zsbGzr4uJibGvS/v7+\n6N70U0n3cYNDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jA\nIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhbJOni46OjrY49k57e3tjW7u7u2Nba63148ePsa1nz56N\nbb19+3Zsa/L7sdZaBwcHo3v3cYNDmMAhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJ\nHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQtsnbZB8/ftzi2Dudn58nt9Za\n6/DwcGzr8+fPY1s3NzdjW0+fPh3bWmutq6ur0b37uMEhTOAQJnAIEziECRzCBA5hAocwgUOYwCFM\n4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQtsnTRZPPxUw+\ng/Pw4SZ/rv91eXk5tvXo0aOxrYuLi+TWWmvt7OyM7t3HDQ5hAocwgUOYwCFM4BAmcAgTOIQJHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hAoewTd7iefDg\nwRbH3unx48djW1dXV2Nba63169evsa3r6+uxrd+/f49tff/+fWxrrdnnpv6GGxzCBA5hAocwgUOY\nwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hmzxd9Pz58y2OvdPPnz/Htl68eDG2tdZab968Gdv69u3b2NaTJ0/Gtg4ODsa21pr93f6G\nGxzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFD\nmMAhTOAQJnAIEziECRzCBA5hAoewTd4mu76+3uLYO02+gzb9ztXl5eXY1pcvX8a2Pnz4MLa1t7c3\ntrXWWq9fvx7du48bHMIEDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziE\nCRzCBA5hAocwgUOYwCFM4BAmcAgTOIQJHMIEDmE7t7e3//ozABtxg0OYwCFM4BAmcAgTOIQJHMIE\nDmEChzCBQ5jAIUzgECZwCBM4hAkcwgQOYQKHMIFDmMAhTOAQJnAIEziECRzCBA5hfwB6TGPZaLRh\nGwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x155087d10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    patch = output[i]\n",
    "    patch = patch.reshape(8,8) * 255.0\n",
    "    plt.imshow(patch,  cmap='gray')\n",
    "    plt.axis('off')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot a single image patch and compare"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "## ANALYZE RESULTS\n",
    "**Comment on the Effectiveness of your model.**  \n",
    "**Can you improve the model by changing any of the parameters?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 37.47543716  37.89933395  36.84737015  34.51482773  35.21337891\n",
      "   33.31004715  31.19306374  32.2495079 ]\n",
      " [ 37.3486557   37.1876297   35.6241684   35.13164139  34.55157852\n",
      "   33.40540314  31.43386269  31.19120026]\n",
      " [ 35.12536621  34.93384552  34.81932831  34.60026932  33.70185471\n",
      "   33.41449738  32.11282349  32.08383179]\n",
      " [ 33.25758743  32.35405731  32.54502869  33.20717621  33.28340149\n",
      "   34.02289963  32.88191223  31.97543907]\n",
      " [ 29.74655914  29.48270226  29.38748741  29.52987671  31.82883072\n",
      "   32.26580048  32.11250687  31.10915756]\n",
      " [ 29.54504776  28.71029854  28.3489666   28.59669495  29.91965485\n",
      "   30.5398941   31.06070328  30.09921074]\n",
      " [ 28.55385017  27.87735748  28.20727158  27.90884018  29.74308014\n",
      "   30.32805252  30.73750305  30.86085129]\n",
      " [ 31.33398628  29.25794983  29.29073715  28.75881386  29.35293961\n",
      "   30.19287682  30.62119484  32.3893013 ]]\n"
     ]
    }
   ],
   "source": [
    "print output[1234].reshape(8,8) * 255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x152c99550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nv4qIMySdDLw3It7f7XiaPtKwrWhQ9zQk7S5pSno9kWoq56+o7k0dlar9CVWHMctuUCONbiS9R9Jy\n4C3ADyXdmPa9hGoEdh/VyOnMNBLfCHwcuBG4H5ib6kI1GvtUumm+Gy9/YfRyYLdU/ingX6bpdlLi\n7CkbBRED/aGavYHZaUrhGKrOcL2qL6N9V9InqaaWfmRQOzTrZMCx3W0/1wDXdFh3IdX04S3L5wHz\n2pQ/wsszrFrL1wMnDee4nDQsm0Fd+oyIRcCb2pSvAf7dQHZiNgwlX9Z30rBsSu5Y1mwlx3aWpPH8\n88/X/otOmjSp9n4ff/zx3pW6uOOO+tPtd921/peC77333tpt77rrrtptAfbZ5/e+29W3r3zlK13n\nujetY9100021P1CbL2j17S1veUvttgCrVq3qXamDtWvX1m77xBNP9K7UwaZNm3pX6mLJkl7Phezs\nM5/5TM//WU2L7eHwSMOyKbljWbOVHNtOGpbFaN0sNBttpce2k4ZlU/LZmDVbybHtpGHZlNyxrNlK\njm0nDcum5I5lzVZybDtpWBaD+las2atN6bHtpGHZlNyxrNlKjm0nDcum5Bkm1mwlx7aThmVT8tmY\nNVvJse2kYVmUft3Xmqv02HbSsGxK7ljWbCXHtpOGZVNyx7JmKzm2nTQsm5I7ljVbybGdJWls3Lix\ndtunn+7687RdPfroo7XbAkyZMqV229WrV9duO3bs2Nptx40bV7stwG9/+9sRte+kic/nOfbYY2u3\nnTNnTu22kydPrt0WYP369bXbLlu2rHbbPfbYo3bbnXbaqXZbgP32229E7btpYmwPh0calk3JZ2PW\nbCXHtpOGZVNyx7JmKzm2nTQsm5I7ljVbybHtpGHZlNyxrNlKjm0nDcui9JuF1lylx7aThmVT8tmY\nNVvJse2kYdmU3LGs2UqObScNy6bkjmXNVnJsO2lYFqU/1M2aq/TYdtKwbEruWNZsJce2k4ZlU/IM\nE2u2kmPbScOyKflszJqt5Nh20rAsSr/ua81Vemw7aVg2JXcsa7aSYztL0pg/f37tti+++GLttiO9\nzjiSfT/55JMj2nddu+2224ja5wz+pnWshx9+uHbbtWvX1m5722231W4LI3vk/6RJk2q3HUlsLl68\nuHZbGNnf+8ADD+xZZzRiW9JJwGeBA4EjIuKeVL4fcD/wQKo6PyLOSOsOBb4NTATmAZ+IiJC0K/B9\n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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x155af5e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#add vmax and vmin : todo\n",
    "\n",
    "plt.figure(1)\n",
    "ax =plt.subplot(121)\n",
    "patch_clean = clean_patch_img[1234].reshape(8,8) * 255.0\n",
    "plt.imshow(patch_clean, cmap='gray', vmin=25, vmax=160)\n",
    "ax.set_title('Clean')\n",
    "plt.axis('off')\n",
    "plt.colorbar()\n",
    "\n",
    "ax = plt.subplot(122)\n",
    "patch_noisy = noisy_patch_img[1234].reshape(8,8) * 255.0\n",
    "plt.imshow(patch_noisy, cmap='gray', vmin=25, vmax=160)\n",
    "ax.set_title('Noisy')\n",
    "plt.axis('off')\n",
    "plt.colorbar()\n",
    "plt.show()\n",
    "\n",
    "ax = plt.subplot(121)\n",
    "patch_denoised = output[1234].reshape(8,8) * 255.0\n",
    "plt.imshow(patch_denoised, cmap='gray')\n",
    "ax.set_title('Denoised')\n",
    "plt.axis('off')\n",
    "plt.colorbar()\n",
    "\n",
    "ax =plt.subplot(122)\n",
    "patch_noisy_clean_diff = patch_denoised - patch_clean\n",
    "patch_noisy_clean_diff = patch_noisy_clean_diff.reshape(8,8) * 255.0\n",
    "plt.imshow(patch_noisy_clean_diff, cmap='gray') #vmin=-10000, vmax=-60000)\n",
    "ax.set_title('Diff Denoised - clean')\n",
    "plt.colorbar()\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate psnr 1\n",
    "psnr1 = -10. * np.log10(np.mean(np.square(patch_denoised - patch_clean)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate psnr 2\n",
    "psnr2 = -10. * np.log10(np.mean(np.square(patch_noisy - patch_clean)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "patch_denoised - patch_clean\n",
      "-34.5942049317\n",
      "patch_noisy - patch_clean\n",
      "-22.7518845712\n"
     ]
    }
   ],
   "source": [
    "print \"patch_denoised - patch_clean\"\n",
    "print psnr1\n",
    "print \"patch_noisy - patch_clean\"\n",
    "print psnr2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model could be more effective if it could be trained on higher epoch. \n",
    "By increasing the epoch the efficincy can be increased. We might we overfitting with the small dataset, we could improve and avoid overfitting it by using a bigger datasets\n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
